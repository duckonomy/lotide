16
{"last_modification_time":1574753350,"language":2,"import_file":"/home/duckonomy/libzippp/src/libzippp.cpp","args_hash":8583860895283344595,"includes":[{"line":38,"resolved_path":"/usr/include/c++/9/cstdio"},{"line":39,"resolved_path":"/usr/include/c++/9/string"},{"line":40,"resolved_path":"/usr/include/c++/9/vector"}],"dependencies":["/home/duckonomy/libzippp/src/libzippp.cpp","/usr/include/zip.h","/usr/include/zipconf.h","/usr/lib/clang/7.0.0/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/types.h","/usr/include/bits/stdint-intn.h","/usr/include/bits/stdint-uintn.h","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/timex.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/types/locale_t.h","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/9/fstream","/usr/include/c++/9/istream","/usr/include/c++/9/ios","/usr/include/c++/9/iosfwd","/usr/include/c++/9/x86_64-redhat-linux/bits/c++config.h","/usr/include/c++/9/x86_64-redhat-linux/bits/os_defines.h","/usr/include/c++/9/bits/stringfwd.h","/usr/include/c++/9/bits/memoryfwd.h","/usr/include/c++/9/bits/postypes.h","/usr/include/c++/9/cwchar","/usr/include/wchar.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/mbstate_t.h","/usr/include/c++/9/exception","/usr/include/c++/9/bits/exception.h","/usr/include/c++/9/bits/exception_ptr.h","/usr/include/c++/9/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.0/include/stddef.h","/usr/include/c++/9/typeinfo","/usr/include/c++/9/bits/hash_bytes.h","/usr/include/c++/9/new","/usr/include/c++/9/bits/nested_exception.h","/usr/include/c++/9/bits/move.h","/usr/include/c++/9/bits/concept_check.h","/usr/include/c++/9/type_traits","/usr/include/c++/9/bits/char_traits.h","/usr/include/c++/9/bits/stl_algobase.h","/usr/include/c++/9/bits/functexcept.h","/usr/include/c++/9/bits/cpp_type_traits.h","/usr/include/c++/9/ext/type_traits.h","/usr/include/c++/9/ext/numeric_traits.h","/usr/include/c++/9/bits/stl_pair.h","/usr/include/c++/9/bits/stl_iterator_base_types.h","/usr/include/c++/9/bits/stl_iterator_base_funcs.h","/usr/include/c++/9/bits/stl_iterator.h","/usr/include/c++/9/bits/ptr_traits.h","/usr/include/c++/9/debug/debug.h","/usr/include/c++/9/cstdint","/usr/include/c++/9/bits/localefwd.h","/usr/include/c++/9/x86_64-redhat-linux/bits/c++locale.h","/usr/include/c++/9/clocale","/usr/include/locale.h","/usr/include/c++/9/cctype","/usr/include/ctype.h","/usr/include/c++/9/bits/ios_base.h","/usr/include/c++/9/ext/atomicity.h","/usr/include/c++/9/x86_64-redhat-linux/bits/gthr.h","/usr/include/c++/9/x86_64-redhat-linux/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/bits/sched.h","/usr/include/bits/setjmp.h","/usr/include/c++/9/bits/locale_classes.h","/usr/include/c++/9/string","/usr/include/c++/9/bits/allocator.h","/usr/include/c++/9/x86_64-redhat-linux/bits/c++allocator.h","/usr/include/c++/9/ext/new_allocator.h","/usr/include/c++/9/bits/ostream_insert.h","/usr/include/c++/9/bits/stl_function.h","/usr/include/c++/9/bits/range_access.h","/usr/include/c++/9/initializer_list","/usr/include/c++/9/bits/basic_string.h","/usr/include/c++/9/ext/alloc_traits.h","/usr/include/c++/9/bits/alloc_traits.h","/usr/include/c++/9/ext/string_conversions.h","/usr/include/c++/9/cstdlib","/usr/include/stdlib.h","/usr/include/alloca.h","/usr/include/c++/9/bits/std_abs.h","/usr/include/c++/9/cstdio","/usr/include/c++/9/cerrno","/usr/include/c++/9/bits/functional_hash.h","/usr/include/c++/9/bits/basic_string.tcc","/usr/include/c++/9/system_error","/usr/include/c++/9/x86_64-redhat-linux/bits/error_constants.h","/usr/include/c++/9/stdexcept","/usr/include/c++/9/streambuf","/usr/include/c++/9/bits/basic_ios.h","/usr/include/c++/9/bits/locale_facets.h","/usr/include/c++/9/cwctype","/usr/include/wctype.h","/usr/include/bits/wctype-wchar.h","/usr/include/c++/9/bits/streambuf_iterator.h","/usr/include/c++/9/ostream","/usr/include/c++/9/bits/ostream.tcc","/usr/include/c++/9/bits/istream.tcc","/usr/include/c++/9/x86_64-redhat-linux/bits/basic_file.h","/usr/include/c++/9/x86_64-redhat-linux/bits/c++io.h","/usr/include/c++/9/bits/fstream.tcc","/usr/include/c++/9/memory","/usr/include/c++/9/bits/stl_construct.h","/usr/include/c++/9/bits/stl_uninitialized.h","/usr/include/c++/9/bits/stl_tempbuf.h","/usr/include/c++/9/ext/concurrence.h","/usr/include/c++/9/bits/uses_allocator.h","/usr/include/c++/9/bits/unique_ptr.h","/usr/include/c++/9/utility","/usr/include/c++/9/tuple","/usr/include/c++/9/array","/usr/include/c++/9/bits/invoke.h","/usr/include/c++/9/bits/shared_ptr.h","/usr/include/c++/9/bits/shared_ptr_base.h","/usr/include/c++/9/bits/allocated_ptr.h","/usr/include/c++/9/bits/refwrap.h","/usr/include/c++/9/ext/aligned_buffer.h","/usr/include/c++/9/bits/shared_ptr_atomic.h","/usr/include/c++/9/bits/atomic_base.h","/usr/include/c++/9/backward/auto_ptr.h","/usr/include/c++/9/vector","/usr/include/c++/9/bits/stl_vector.h","/usr/include/c++/9/bits/stl_bvector.h","/usr/lib/clang/7.0.0/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/__sigset_t.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/error_t.h","/usr/include/bits/types/wint_t.h","/usr/lib/clang/7.0.0/include/__stddef_max_align_t.h","/usr/include/c++/9/bits/predefined_ops.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/c++/9/x86_64-redhat-linux/bits/atomic_word.h","/usr/include/c++/9/bits/cxxabi_forced.h","/usr/include/c++/9/backward/binders.h","/usr/include/c++/9/bits/locale_classes.tcc","/usr/include/c++/9/bits/streambuf.tcc","/usr/include/c++/9/x86_64-redhat-linux/bits/ctype_base.h","/usr/include/c++/9/x86_64-redhat-linux/bits/ctype_inline.h","/usr/include/c++/9/bits/locale_facets.tcc","/usr/include/c++/9/bits/basic_ios.tcc","/usr/include/c++/9/bits/codecvt.h","/usr/include/c++/9/bits/stl_raw_storage_iter.h","/usr/include/c++/9/bits/stl_relops.h","/usr/include/c++/9/bits/vector.tcc","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/timesize.h","/usr/include/bits/typesizes.h","/usr/include/bits/time64.h","/usr/include/bits/wchar.h","/usr/include/bits/stdio_lim.h","/usr/include/bits/endian.h","/usr/include/asm-generic/errno-base.h","/usr/include/c++/9/x86_64-redhat-linux/bits/cpu_defines.h","/usr/include/c++/9/bits/exception_defines.h","/usr/include/c++/9/debug/assertions.h","/usr/include/bits/locale.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/stdlib-float.h","/usr/include/c++/9/bits/atomic_lockfree_defines.h"],"skipped_by_preprocessor":["55:1-62:6","72:1-75:6"],"types":[{"id":0,"usr":12640442154825290093,"detailed_name":"zip","short_name_offset":0,"short_name_size":3,"kind":23,"hover":"","comments":"defined in libzip","declarations":["44:8-44:11|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[7,7],"uses":["387:9-387:12|-1|1|4"]},{"id":1,"usr":12370912420074125909,"detailed_name":"zip_source","short_name_offset":0,"short_name_size":10,"kind":23,"hover":"","comments":"","declarations":["45:8-45:18|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[11],"uses":["388:9-388:19|-1|1|4"]},{"id":2,"usr":18,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":3,"usr":12644210967709363381,"detailed_name":"libzippp_int64","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef long int libzippp_int64","comments":"standard ISO c++ does not support long long","declarations":[],"spell":"64:26-64:40|-1|1|2","extent":"64:9-64:40|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["64:26-64:40|-1|1|4","221:9-221:23|-1|1|4","222:16-222:30|-1|1|4","252:27-252:41|-1|1|4"]},{"id":4,"usr":10,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":5,"usr":4425131120675147971,"detailed_name":"libzippp_uint64","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"typedef unsigned long int libzippp_uint64","comments":"","declarations":[],"spell":"65:35-65:50|-1|1|2","extent":"65:9-65:50|-1|1|0","alias_of":4,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[13,17,18,13,17,18,23,27,28],"uses":["65:35-65:50|-1|1|4","278:91-278:106|-1|1|4","290:94-290:109|-1|1|4","304:94-304:109|-1|1|4","367:70-367:85|-1|1|4","425:16-425:31|-1|1|4","445:16-445:31|-1|1|4","450:16-450:31|-1|1|4","495:77-495:92|-1|1|4","504:73-504:88|-1|1|4","518:94-518:109|-1|1|4","523:9-523:24|-1|1|4","527:9-527:24|-1|1|4","528:9-528:24|-1|1|4","531:70-531:85|-1|1|4","531:161-531:176|-1|1|4","531:183-531:198|-1|1|4"]},{"id":6,"usr":8,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":7,"usr":10323197345981468914,"detailed_name":"libzippp_uint16","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"typedef unsigned short libzippp_uint16","comments":"","declarations":[],"spell":"66:32-66:47|-1|1|2","extent":"66:9-66:47|-1|1|0","alias_of":6,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[15,16,15,16,25,26],"uses":["66:32-66:47|-1|1|4","435:16-435:31|-1|1|4","440:16-440:31|-1|1|4","525:9-525:24|-1|1|4","526:9-526:24|-1|1|4","531:106-531:121|-1|1|4","531:134-531:149|-1|1|4"]},{"id":8,"usr":2513088488189332438,"detailed_name":"libzippp","short_name_offset":0,"short_name_size":8,"kind":3,"hover":"","comments":"","declarations":[],"spell":"92:11-92:19|-1|1|2","extent":"92:1-534:2|-1|1|0","bases":[9],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["92:11-92:19|-1|1|4"]},{"id":9,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[8],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":10,"usr":18250348009064506273,"detailed_name":"libzippp::ZipEntry","short_name_offset":10,"short_name_size":8,"kind":5,"hover":"","comments":"\nRepresents an entry in a zip file.\nThis class is meant to be used by the ZipArchive class.","declarations":["93:11-93:19|8|2|1","414:18-414:26|-1|1|4","415:18-415:26|-1|1|4","531:9-531:17|-1|1|4"],"spell":"407:24-407:32|8|2|2","extent":"407:5-533:6|8|2|0","bases":[],"derived":[],"types":[],"funcs":[43,44,45,46,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65],"vars":[12,20,13,14,15,16,17,18,19],"instances":[],"uses":["230:21-230:29|-1|1|4","245:9-245:17|-1|1|4","252:9-252:17|-1|1|4","259:43-259:51|-1|1|4","260:36-260:44|-1|1|4","266:46-266:54|-1|1|4","267:47-267:55|-1|1|4","278:31-278:39|-1|1|4","304:29-304:37|-1|1|4","315:31-315:39|-1|1|4","338:31-338:39|-1|1|4","396:9-396:17|-1|1|4","414:18-414:26|10|2|4","531:9-531:17|10|2|4"]},{"id":11,"usr":14665340157409346965,"detailed_name":"libzippp::ZipArchive","short_name_offset":10,"short_name_size":10,"kind":5,"hover":"","comments":"\nRepresents a ZIP archive. This class provides useful methods to handle an archive\ncontent. It is simply a wrapper around libzip.","declarations":["133:18-133:28|-1|1|4","134:18-134:28|-1|1|4","399:9-399:19|-1|1|4","408:18-408:28|-1|1|4"],"spell":"99:24-99:34|8|2|2","extent":"99:5-401:6|8|2|0","bases":[],"derived":[],"types":[],"funcs":[0,2,3,4,6,7,8,9,10,11,12,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"vars":[6,7,11,8,9],"instances":[12,12,21],"uses":["133:18-133:28|11|2|4","141:16-141:26|-1|1|4","399:9-399:19|11|2|4","399:26-399:36|-1|1|4","400:9-400:19|-1|1|4","400:37-400:47|-1|1|4","495:32-495:42|-1|1|4","495:56-495:66|-1|1|4","504:28-504:38|-1|1|4","504:52-504:62|-1|1|4","518:49-518:59|-1|1|4","518:73-518:83|-1|1|4","521:15-521:25|-1|1|4","531:24-531:34|-1|1|4"]},{"id":12,"usr":7102684784959214987,"detailed_name":"libzippp::ZipArchive::OpenMode","short_name_offset":22,"short_name_size":8,"kind":10,"hover":"","comments":"\nDefines how the zip file must be open.\nNOT_OPEN is a special mode where the file is not open.\nREAD_ONLY is the basic mode to only read the archive.\nWRITE will append to an existing archive or create a new one if it does not exist.\nNEW will create a new archive or erase all the data if a previous one exists.","declarations":[],"spell":"109:14-109:22|11|2|2","extent":"109:9-114:10|11|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8,8],"uses":["141:74-141:82|-1|1|4","154:19-154:27|-1|1|4","383:16-383:24|-1|1|4","389:9-389:17|-1|1|4","393:58-393:66|-1|1|4"]},{"id":13,"usr":16938868521056141468,"detailed_name":"libzippp::ZipArchive::State","short_name_offset":22,"short_name_size":5,"kind":10,"hover":"","comments":"\nDefines how the reading of the data should be made in the archive.\nORIGINAL will read the data of the original archive file, without any change.\nCURRENT will read the current content of the archive.","declarations":[],"spell":"121:14-121:19|11|2|2","extent":"121:9-124:10|11|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10],"uses":["200:32-200:37|-1|1|4","221:37-221:42|-1|1|4","222:47-222:52|-1|1|4","230:42-230:47|-1|1|4","237:104-237:109|-1|1|4","245:108-245:113|-1|1|4","252:49-252:54|-1|1|4","259:60-259:65|-1|1|4","278:70-278:75|-1|1|4","290:73-290:78|-1|1|4","304:73-304:78|-1|1|4","495:44-495:49|-1|1|4","504:40-504:45|-1|1|4","518:61-518:66|-1|1|4"]},{"id":14,"usr":5401847601697785946,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["133:35-133:38|11|2|4","133:63-133:66|11|2|4","146:9-146:12|11|2|4","200:9-200:12|11|2|4","201:31-201:34|11|2|4","207:67-207:70|16|3|4","230:9-230:12|11|2|4","237:29-237:32|11|2|4","245:33-245:36|11|2|4","259:9-259:12|11|2|4","260:59-260:62|11|2|4","290:31-290:34|11|2|4","304:49-304:52|11|2|4","327:31-327:34|11|2|4","338:54-338:57|11|2|4","349:31-349:34|11|2|4","349:57-349:60|11|2|4","358:28-358:31|11|2|4","358:58-358:61|11|2|4","367:28-367:31|11|2|4","377:29-377:32|11|2|4","386:9-386:12|11|2|4","390:9-390:12|11|2|4","420:16-420:19|10|2|4","486:9-486:12|10|2|4","487:31-487:34|10|2|4","495:9-495:12|10|2|4","518:25-518:28|10|2|4","522:9-522:12|10|2|4","531:51-531:54|10|2|4"]},{"id":15,"usr":14151982074805896770,"detailed_name":"std::string","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,9,6,9,20,20,22],"uses":["133:40-133:46|-1|1|4","133:68-133:74|-1|1|4","146:14-146:20|-1|1|4","200:14-200:20|-1|1|4","201:36-201:42|-1|1|4","207:72-207:78|-1|1|4","237:34-237:40|-1|1|4","245:38-245:44|-1|1|4","259:14-259:20|-1|1|4","260:64-260:70|-1|1|4","290:36-290:42|-1|1|4","327:36-327:42|-1|1|4","338:59-338:65|-1|1|4","349:36-349:42|-1|1|4","349:62-349:68|-1|1|4","358:33-358:39|-1|1|4","358:63-358:69|-1|1|4","367:33-367:39|-1|1|4","377:34-377:40|-1|1|4","386:14-386:20|-1|1|4","390:14-390:20|-1|1|4","420:21-420:27|-1|1|4","486:14-486:20|-1|1|4","487:36-487:42|-1|1|4","495:14-495:20|-1|1|4","522:14-522:20|-1|1|4","531:56-531:62|-1|1|4"]},{"id":16,"usr":16199156163178427820,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["141:59-141:67|-1|1|4","393:45-393:53|-1|1|4"]},{"id":17,"usr":10956461108384510180,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["230:14-230:20|-1|1|4"]},{"id":18,"usr":15342995699754134592,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["304:54-304:61|-1|1|4","518:30-518:37|-1|1|4"]},{"id":19,"usr":16253826491777321815,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["396:37-396:45|-1|1|4"]},{"id":20,"usr":4840261395307685494,"detailed_name":"time_t","short_name_offset":0,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[14,14,24],"uses":["430:16-430:22|-1|1|4","524:9-524:15|-1|1|4","531:93-531:99|-1|1|4"]},{"id":21,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[19,19,29],"uses":[]}],"funcs":[{"id":0,"usr":7584052112079040907,"detailed_name":"explicit libzippp::ZipArchive::ZipArchive(const std::string &zipPath, const std::string &password = \"\")","short_name_offset":19,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\nCreates a new ZipArchive with the given path. If the password is defined, it\nwill be used to read encrypted archive. It won't affect the files added\nto the archive.\n\nhttp://nih.at/listarchive/libzip-discuss/msg00219.html","declarations":[{"spell":"133:18-133:28|11|2|1","param_spellings":["133:48-133:55","133:76-133:84"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":8328805573115715046,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["133:85-133:87|11|2|292"],"callees":[]},{"id":2,"usr":17339734775837237919,"detailed_name":"virtual libzippp::ZipArchive::~ZipArchive() noexcept","short_name_offset":30,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"134:17-134:28|11|2|1","param_spellings":[]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":13545986779877438741,"detailed_name":"static libzippp::ZipArchive *libzippp::ZipArchive::fromBuffer(const char *buffer, uint32_t size, libzippp::ZipArchive::OpenMode mode = READ_ONLY, bool checkConsistency = false)","short_name_offset":51,"short_name_size":10,"kind":254,"storage":3,"hover":"","comments":"\nCreates a new ZipArchive from the specified buffer. The archive will\ndirectly be open with the given mode. If the archive fails to be open or\nif the consistency check fails, this method will return null.","declarations":[{"spell":"141:28-141:38|11|2|1","param_spellings":["141:51-141:57","141:68-141:72","141:83-141:87","141:104-141:120"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":14923707723100889092,"detailed_name":"std::string libzippp::ZipArchive::getPath() const","short_name_offset":34,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nReturn the path of the ZipArchive.","declarations":[],"spell":"146:21-146:28|11|2|2","extent":"146:9-146:57|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["146:50-146:54|5|3|292"]},{"id":5,"usr":13673230355623518896,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["146:50-146:54|4|3|292","420:57-420:61|45|3|292","532:35-532:45|65|3|292"],"callees":[]},{"id":6,"usr":1792173621477589718,"detailed_name":"bool libzippp::ZipArchive::open(libzippp::ZipArchive::OpenMode mode = READ_ONLY, bool checkConsistency = false)","short_name_offset":27,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\nOpen the ZipArchive with the given mode. This method will return true if the operation\nis successful, false otherwise. If the OpenMode is NOT_OPEN an invalid_argument\nwill be thrown. If the archive is already open, this method returns true only if the\nmode is the same.","declarations":[{"spell":"154:14-154:18|11|2|1","param_spellings":["154:28-154:32","154:49-154:65"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":11260222670681004290,"detailed_name":"int libzippp::ZipArchive::close()","short_name_offset":26,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\nCloses the ZipArchive and releases all the resources held by it. If the ZipArchive was\nnot open previously, this method does nothing. If the archive was open in modification\nand some were done, they will be committed.\nThis method returns LIBZIPPP_OK if the archive was successfully closed, otherwise it \nreturns the value returned by the zip_close() function.","declarations":[{"spell":"163:13-163:18|11|2|1","param_spellings":[]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":10487167762249062781,"detailed_name":"void libzippp::ZipArchive::discard()","short_name_offset":27,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nCloses the ZipArchive and releases all the resources held by it. If the ZipArchive was\nnot open previously, this method does nothing. If the archive was open in modification\nand some were done, they will be rollbacked.","declarations":[{"spell":"170:14-170:21|11|2|1","param_spellings":[]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":13598507757322275708,"detailed_name":"bool libzippp::ZipArchive::unlink()","short_name_offset":27,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\nDeletes the file denoted by the path. If the ZipArchive is open, all the changes will\nbe discarded and the file removed.","declarations":[{"spell":"176:14-176:20|11|2|1","param_spellings":[]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":17216785095514219719,"detailed_name":"inline bool libzippp::ZipArchive::isOpen() const","short_name_offset":34,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if the ZipArchive is currently open.","declarations":[],"spell":"182:21-182:27|11|2|2","extent":"182:9-182:67|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":["187:52-187:58|11|3|36"],"callees":[]},{"id":11,"usr":77509298175660658,"detailed_name":"inline bool libzippp::ZipArchive::isMutable() const","short_name_offset":34,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if the ZipArchive is open and mutable.","declarations":[],"spell":"187:21-187:30|11|2|2","extent":"187:9-187:100|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["187:52-187:58|10|3|36"]},{"id":12,"usr":13041476425101730496,"detailed_name":"inline bool libzippp::ZipArchive::isEncrypted() const","short_name_offset":34,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if the ZipArchive is encrypted. This method returns true only if\na password has been set in the constructor.","declarations":[],"spell":"193:21-193:32|11|2|2","extent":"193:9-193:74|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["193:64-193:69|13|3|36"]},{"id":13,"usr":4881819847716884070,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["193:64-193:69|12|3|36"],"callees":[]},{"id":14,"usr":6459491986097347543,"detailed_name":"std::string libzippp::ZipArchive::getComment(libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":34,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\nDefines the comment of the archive. In order to set the comment, the archive\nmust have been open in WRITE or NEW mode. If the archive is not open, the getComment\nmethod will return an empty string.","declarations":[{"spell":"200:21-200:31|11|2|1","param_spellings":["200:38-200:43"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":9242952963089182064,"detailed_name":"bool libzippp::ZipArchive::setComment(const std::string &comment) const","short_name_offset":27,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"201:14-201:24|11|2|1","param_spellings":["201:44-201:51"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":["207:56-207:66|16|3|36"],"callees":[]},{"id":16,"usr":13915583174773074792,"detailed_name":"inline bool libzippp::ZipArchive::removeComment() const","short_name_offset":34,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\nRemoves the comment of the archive, if any. The archive must have been open\nin WRITE or NEW mode.","declarations":[],"spell":"207:21-207:34|11|2|2","extent":"207:9-207:84|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["207:56-207:66|15|3|36","207:67-207:80|17|3|292"]},{"id":17,"usr":9367017417623795641,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["207:67-207:80|16|3|292"],"callees":[]},{"id":18,"usr":17722094054181482429,"detailed_name":"libzippp_int64 libzippp::ZipArchive::getNbEntries(libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":37,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\nReturns the number of entries in this zip file (folders are included).\nThe zip file must be open otherwise LIBZIPPP_ERROR_NOT_OPEN will be returned. \nIf the state is ORIGINAL, then the number entries of the original archive are returned.\nAny change will not be considered.\nNote also that the deleted entries does not affect the result of this method\nwith the CURRENT state. For instance, if there are 3 entries and you delete one,\nthis method will still return 3. However, if you add one entry, it will return\n4 with the state CURRENT and 3 with the state ORIGINAL.\nIf you wanna know the \"real\" entries effectively in the archive, you might use\nthe getEntries method.","declarations":[{"spell":"221:24-221:36|11|2|1","param_spellings":["221:43-221:48"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":["222:83-222:95|19|3|36"],"callees":[]},{"id":19,"usr":126257182671068856,"detailed_name":"inline libzippp_int64 libzippp::ZipArchive::getEntriesCount(libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":44,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"222:31-222:46|11|2|2","extent":"222:9-222:105|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[10],"uses":[],"callees":["222:83-222:95|18|3|36"]},{"id":20,"usr":9492229548974064399,"detailed_name":"std::vector<ZipEntry> libzippp::ZipArchive::getEntries(libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":44,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\nReturns all the entries of the ZipArchive. If the state is ORIGINAL, then\nreturns the entries in the original archive, any change will not be considered.\nThe zip file must be open otherwise an empty vector will be returned.","declarations":[{"spell":"230:31-230:41|11|2|1","param_spellings":["230:48-230:53"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":11430173641800947631,"detailed_name":"bool libzippp::ZipArchive::hasEntry(const std::string &name, bool excludeDirectories = false, bool caseSensitive = true, libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nReturn true if an entry with the specified name exists. If no such entry exists,\nthen false will be returned. If a directory is searched, the name must end with a '/' !\nThe zip file must be open otherwise false will be returned.","declarations":[{"spell":"237:14-237:22|11|2|1","param_spellings":["237:42-237:46","237:53-237:71","237:84-237:97","237:110-237:115"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":17392094617837142619,"detailed_name":"libzippp::ZipEntry libzippp::ZipArchive::getEntry(const std::string &name, bool excludeDirectories = false, bool caseSensitive = true, libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":41,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nReturn the ZipEntry for the specified entry name. If no such entry exists,\nthen a null-ZiPEntry will be returned. If a directory is searched, the name\nmust end with a '/' !\nThe zip file must be open otherwise a null-ZipEntry will be returned.","declarations":[{"spell":"245:18-245:26|11|2|1","param_spellings":["245:46-245:50","245:57-245:75","245:88-245:101","245:114-245:119"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":10676659876997461450,"detailed_name":"libzippp::ZipEntry libzippp::ZipArchive::getEntry(libzippp_int64 index, libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":41,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nReturn the ZipEntry for the specified index. If the index is out of range,\nthen a null-ZipEntry will be returned.\nThe zip file must be open otherwise a null-ZipEntry will be returned.","declarations":[{"spell":"252:18-252:26|11|2|1","param_spellings":["252:42-252:47","252:55-252:60"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":17761896100401543991,"detailed_name":"std::string libzippp::ZipArchive::getEntryComment(const libzippp::ZipEntry &entry, libzippp::ZipArchive::State state = CURRENT) const","short_name_offset":34,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"\nDefines the comment of the entry. If the ZipArchive is not open or the\nentry is not linked to this archive, then an empty string or false will \nbe returned.","declarations":[{"spell":"259:21-259:36|11|2|1","param_spellings":["259:53-259:58","259:66-259:71"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":9838387378762314086,"detailed_name":"bool libzippp::ZipArchive::setEntryComment(const libzippp::ZipEntry &entry, const std::string &comment) const","short_name_offset":27,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"260:14-260:29|11|2|1","param_spellings":["260:46-260:51","260:72-260:79"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":9097728651308836789,"detailed_name":"bool libzippp::ZipArchive::isEntryCompressionEnabled(const libzippp::ZipEntry &entry) const","short_name_offset":27,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"\nDefines the compression method of an entry. If the ZipArchive is not open\nor the entry is not linked to this archive, false will be returned.","declarations":[{"spell":"266:14-266:39|11|2|1","param_spellings":["266:56-266:61"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":3233927719164974901,"detailed_name":"bool libzippp::ZipArchive::setEntryCompressionEnabled(const libzippp::ZipEntry &entry, bool value) const","short_name_offset":27,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"267:14-267:40|11|2|1","param_spellings":["267:57-267:62","267:69-267:74"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":8627533558478322462,"detailed_name":"void *libzippp::ZipArchive::readEntry(const libzippp::ZipEntry &zipEntry, bool asText = false, libzippp::ZipArchive::State state = CURRENT, libzippp_uint64 size = 0) const","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\nRead the specified ZipEntry of the ZipArchive and returns its content within\na char array. If there is an error while reading the entry, then null will be returned.\nThe data must be deleted by the developer once not used anymore. If the asText\nis set to true, then the returned void* will be ended by a \\0 (hence the size of\nthe returned array will be zipEntry.getSize()+1 or size+1 if the latter is specified).\nThe zip file must be open otherwise null will be returned. If the ZipEntry was not\ncreated by this ZipArchive, null will be returned.","declarations":[{"spell":"278:15-278:24|11|2|1","param_spellings":["278:41-278:49","278:56-278:62","278:76-278:81","278:107-278:111"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":13612944785236035386,"detailed_name":"void *libzippp::ZipArchive::readEntry(const std::string &zipEntry, bool asText = false, libzippp::ZipArchive::State state = CURRENT, libzippp_uint64 size = 0) const","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\nRead the specified ZipEntry of the ZipArchive and returns its content within\na char array. If there is an error while reading the entry, then null will be returned.\nThe data must be deleted by the developer once not used anymore. If the asText\nis set to true, then the returned void* will be ended by a \\0 (hence the size of\nthe returned array will be zipEntry.getSize()+1 or size+1 if the latter is specified).\nThe zip file must be open otherwise null will be returned. If the ZipEntry was not\ncreated by this ZipArchive, null will be returned. If the zipEntry does not exist,\nthis method returns NULL:","declarations":[{"spell":"290:15-290:24|11|2|1","param_spellings":["290:44-290:52","290:59-290:65","290:79-290:84","290:110-290:114"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":8996717024708335045,"detailed_name":"int libzippp::ZipArchive::readEntry(const libzippp::ZipEntry &zipEntry, std::ostream &ofOutput, libzippp::ZipArchive::State state = CURRENT, libzippp_uint64 chunksize = 524288) const","short_name_offset":26,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\nRead the specified ZipEntry of the ZipArchive and inserts its content in the provided reference to an already\nopened std::ofstream, gradually, with chunks of size \"chunksize\" to reduce memory usage when dealing with big files.\nThe method returns LIBZIPPP_OK if the extraction has succeeded with no problems, LIBZIPPP_ERROR_INVALID_PARAMETER if the \nofstream is not opened, LIBZIPPP_ERROR_NOT_OPEN if the archive is not opened, LIBZIPPP_ERROR_INVALID_ENTRY if the zipEntry \ndoesn't belong to the archive, LIBZIPPP_ERROR_FOPEN_FAILURE if zip_fopen_index() has failed, LIBZIPPP_ERROR_MEMORY_ALLOCATION if \na memory allocation has failed, LIBZIPPP_ERROR_FREAD_FAILURE if zip_fread() didn't succeed to read data, \nLIBZIPPP_ERROR_OWRITE_INDEX_FAILURE if the last ofstream operation has failed, LIBZIPPP_ERROR_OWRITE_FAILURE if fread() didn't \nreturn the exact amount of requested bytes and -9 if the amount of extracted bytes didn't match the size of the file (unknown error).\nIf the provided chunk size is zero, it will be defaulted to DEFAULT_CHUNK_SIZE (512KB).\nThe method doesn't close the ofstream after the extraction.","declarations":[{"spell":"304:13-304:22|11|2|1","param_spellings":["304:39-304:47","304:63-304:71","304:79-304:84","304:110-304:119"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":12976497598786585295,"detailed_name":"int libzippp::ZipArchive::deleteEntry(const libzippp::ZipEntry &entry) const","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nDeletes the specified entry from the zip file. If the entry is a folder, all its\nsubentries will be removed. This method returns the number of entries removed.\nIf the open mode does not allow a deletion, this method will return LIBZIPPP_ERROR_NOT_ALLOWED. \nIf the ZipArchive is not open, LIBZIPPP_ERROR_NOT_OPEN will be returned. If the entry is not handled \nby this ZipArchive or is a null-ZipEntry, then LIBZIPPP_ERROR_INVALID_ENTRY will be returned.\nIf an error occurs during deletion, this method will return LIBZIPPP_ERROR_UNKNOWN.\nNote that this method does not affect the result returned by getNbEntries !","declarations":[{"spell":"315:13-315:24|11|2|1","param_spellings":["315:41-315:46"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":2649871936304333182,"detailed_name":"int libzippp::ZipArchive::deleteEntry(const std::string &entry) const","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nDeletes the specified entry from the zip file. If the entry is a folder, all its\nsubentries will be removed. This method returns the number of entries removed.\nIf the open mode does not allow a deletion, this method will return LIBZIPPP_ERROR_NOT_ALLOWED. \nIf the ZipArchive is not open, LIBZIPPP_ERROR_NOT_OPEN will be returned. If the entry is not handled \nby this ZipArchive or is a null-ZipEntry, then LIBZIPPP_ERROR_INVALID_ENTRY will be returned.\nIf an error occurs during deletion, this method will return LIBZIPPP_ERROR_UNKNOWN.\nIf the entry does not exist, this method returns LIBZIPPP_ERROR_INVALID_PARAMETER.\nNote that this method does not affect the result returned by getNbEntries !","declarations":[{"spell":"327:13-327:24|11|2|1","param_spellings":["327:44-327:49"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":7847816285985307296,"detailed_name":"int libzippp::ZipArchive::renameEntry(const libzippp::ZipEntry &entry, const std::string &newName) const","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nRenames the entry with the specified newName. The method returns the number of entries\nthat have been renamed, LIBZIPPP_ERROR_INVALID_PARAMETER if the new name is invalid, \nLIBZIPPP_ERROR_NOT_ALLOWED if the mode doesn't allow modification or LIBZIPPP_ERROR_UNKNOWN if an error \noccurred.  If the entry is a directory, a '/' will automatically be appended at the end of newName if the \nlatter hasn't it already. All the files in the folder will be moved.\nIf the ZipArchive is not open or the entry was not edited by this ZipArchive or is a null-ZipEntry,\nthen LIBZIPPP_ERROR_INVALID_ENTRY will be returned.","declarations":[{"spell":"338:13-338:24|11|2|1","param_spellings":["338:41-338:46","338:67-338:74"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":13583833796520515435,"detailed_name":"int libzippp::ZipArchive::renameEntry(const std::string &entry, const std::string &newName) const","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nRRenames the entry with the specified newName. The method returns the number of entries\nthat have been renamed, LIBZIPPP_ERROR_INVALID_PARAMETER if the new name is invalid, \nLIBZIPPP_ERROR_NOT_ALLOWED if the mode doesn't allow modification or LIBZIPPP_ERROR_UNKNOWN if an error \noccurred.  If the entry is a directory, a '/' will automatically be appended at the end of newName if the \nlatter hasn't it already. All the files in the folder will be moved.\nIf the ZipArchive is not open or the entry was not edited by this ZipArchive or is a null-ZipEntry,\nthen LIBZIPPP_ERROR_INVALID_ENTRY will be returned. If the entry does not exist, this method returns LIBZIPPP_ERROR_INVALID_PARAMETER.","declarations":[{"spell":"349:13-349:24|11|2|1","param_spellings":["349:44-349:49","349:70-349:77"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":1603112211364948696,"detailed_name":"bool libzippp::ZipArchive::addFile(const std::string &entryName, const std::string &file) const","short_name_offset":27,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nAdd the specified file in the archive with the given entry. If the entry already exists,\nit will be replaced. This method returns true if the file has been added successfully. \nIf the entryName specifies folders that doesn't exist in the archive, they will be automatically created.\nIf the entryName denotes a directory, this method returns false.\nThe zip file must be open otherwise false will be returned.","declarations":[{"spell":"358:14-358:21|11|2|1","param_spellings":["358:41-358:50","358:71-358:75"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":12311087439498612364,"detailed_name":"bool libzippp::ZipArchive::addData(const std::string &entryName, const void *data, libzippp_uint64 length, bool freeData = false) const","short_name_offset":27,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nAdd the given data to the specified entry name in the archive. If the entry already exists,\nits content will be erased. \nIf the entryName specifies folders that doesn't exist in the archive, they will be automatically created.\nIf the entryName denotes a directory, this method returns false.\nIf the zip file is not open, this method returns false.","declarations":[{"spell":"367:14-367:21|11|2|1","param_spellings":["367:41-367:50","367:64-367:68","367:86-367:92","367:99-367:107"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":1777700306677466249,"detailed_name":"bool libzippp::ZipArchive::addEntry(const std::string &entryName) const","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nAdd the specified entry to the ZipArchive. All the needed hierarchy will be created.\nThe entryName must be a directory (end with '/').\nIf the ZipArchive is not open or the entryName is not a directory, this method will\nreturns false. If the entry already exists, this method returns true.\nThis method will only add the specified entry. The 'real' directory may exist or not.\nIf the directory exists, the files in it won't be added to the archive.","declarations":[{"spell":"377:14-377:22|11|2|1","param_spellings":["377:42-377:51"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":15173174938349236890,"detailed_name":"inline libzippp::ZipArchive::OpenMode libzippp::ZipArchive::getMode() const","short_name_offset":60,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nReturns the mode in which the file has been open.\nIf the archive is not open, then NOT_OPEN will be returned.","declarations":[],"spell":"383:25-383:32|11|2|2","extent":"383:9-383:61|11|2|0","declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":5530549830901970443,"detailed_name":"bool libzippp::ZipArchive::openBuffer(const char *buffer, uint32_t sz, libzippp::ZipArchive::OpenMode mode = READ_ONLY, bool checkConsistency = false)","short_name_offset":27,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"open from a buffer","declarations":[{"spell":"393:14-393:24|11|2|1","param_spellings":["393:37-393:43","393:54-393:56","393:67-393:71","393:88-393:104"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":8389591158594101467,"detailed_name":"libzippp::ZipEntry libzippp::ZipArchive::createEntry(struct zip_stat *stat) const","short_name_offset":41,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"generic method to create ZipEntry","declarations":[{"spell":"396:18-396:29|11|2|1","param_spellings":["396:47-396:51"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":90404433134582409,"detailed_name":"libzippp::ZipArchive::ZipArchive(const libzippp::ZipArchive &zf)","short_name_offset":10,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"prevent copy across functions","declarations":[{"spell":"399:9-399:19|11|2|1","param_spellings":["399:38-399:40"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":5440595445864397144,"detailed_name":"libzippp::ZipArchive &libzippp::ZipArchive::operator=(const libzippp::ZipArchive &)","short_name_offset":44,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"400:21-400:30|11|2|1","param_spellings":["400:48-400:48"]}],"declaring_type":11,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":13167961027171331027,"detailed_name":"explicit libzippp::ZipEntry::ZipEntry()","short_name_offset":19,"short_name_size":8,"kind":9,"storage":1,"hover":"","comments":"\nCreates a new null-ZipEntry. Only a ZipArchive will create a valid ZipEntry\nusable to read and modify an archive.","declarations":[],"spell":"414:18-414:26|10|2|2","extent":"414:9-414:146|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":5297234112520811688,"detailed_name":"virtual libzippp::ZipEntry::~ZipEntry() noexcept","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"415:17-415:26|10|2|2","extent":"415:9-415:35|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":4681664186776081573,"detailed_name":"inline std::string libzippp::ZipEntry::getName() const","short_name_offset":39,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nReturns the name of the entry.","declarations":[],"spell":"420:28-420:35|10|2|2","extent":"420:9-420:64|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["420:57-420:61|5|3|292"]},{"id":46,"usr":15161867489047005469,"detailed_name":"inline libzippp_uint64 libzippp::ZipEntry::getIndex() const","short_name_offset":43,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nReturns the index of the file in the zip.","declarations":[],"spell":"425:32-425:40|10|2|2","extent":"425:9-425:70|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":13985562789119196961,"detailed_name":"inline time_t libzippp::ZipEntry::getDate() const","short_name_offset":34,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nReturns the timestamp of the entry.","declarations":[],"spell":"430:23-430:30|10|2|2","extent":"430:9-430:59|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":6459214327863824500,"detailed_name":"inline libzippp_uint16 libzippp::ZipEntry::getCompressionMethod() const","short_name_offset":43,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"\nReturns the compression method.","declarations":[],"spell":"435:32-435:52|10|2|2","extent":"435:9-435:94|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":1831725817303453964,"detailed_name":"inline libzippp_uint16 libzippp::ZipEntry::getEncryptionMethod() const","short_name_offset":43,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"\nReturns the encryption method.","declarations":[],"spell":"440:32-440:51|10|2|2","extent":"440:9-440:92|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":4396313684975053202,"detailed_name":"inline libzippp_uint64 libzippp::ZipEntry::getSize() const","short_name_offset":43,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\nReturns the size of the file (not deflated).","declarations":[],"spell":"445:32-445:39|10|2|2","extent":"445:9-445:68|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":18384570103418302157,"detailed_name":"inline libzippp_uint64 libzippp::ZipEntry::getInflatedSize() const","short_name_offset":43,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"\nReturns the size of the inflated file.","declarations":[],"spell":"450:32-450:47|10|2|2","extent":"450:9-450:80|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":7020518199316370720,"detailed_name":"inline int libzippp::ZipEntry::getCRC() const","short_name_offset":31,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\nReturns the CRC of the file.","declarations":[],"spell":"455:20-455:26|10|2|2","extent":"455:9-455:54|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":8203779809061744674,"detailed_name":"inline bool libzippp::ZipEntry::isDirectory() const","short_name_offset":32,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if the entry is a directory.","declarations":[],"spell":"460:21-460:32|10|2|2","extent":"460:9-460:81|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":["465:50-465:61|56|3|36"],"callees":["460:54-460:78|54|3|36","460:54-460:78|55|3|36","460:54-460:78|54|3|36"]},{"id":54,"usr":13120690668271493414,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["460:54-460:78|53|3|36"],"callees":[]},{"id":55,"usr":9079175875279864043,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["460:54-460:78|53|3|36"],"callees":[]},{"id":56,"usr":10126375700676840323,"detailed_name":"inline bool libzippp::ZipEntry::isFile() const","short_name_offset":32,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if the entry is a file.","declarations":[],"spell":"465:21-465:27|10|2|2","extent":"465:9-465:66|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["465:50-465:61|53|3|36"]},{"id":57,"usr":542875082890991452,"detailed_name":"inline bool libzippp::ZipEntry::isNull() const","short_name_offset":32,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\nReturns true if this entry is null (means no more entry is available).","declarations":[],"spell":"470:21-470:27|10|2|2","extent":"470:9-470:65|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":8330887068514591214,"detailed_name":"bool libzippp::ZipEntry::isCompressionEnabled() const","short_name_offset":25,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"\nDefines if the compression is enabled for this entry.\nThose methods are wrappers arount ZipArchive::isEntryCompressionEnabled and\nZipArchive::setEntryCompressionEnabled.","declarations":[{"spell":"477:14-477:34|10|2|1","param_spellings":[]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":4227379819286760448,"detailed_name":"bool libzippp::ZipEntry::setCompressionEnabled(bool value) const","short_name_offset":25,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"478:14-478:35|10|2|1","param_spellings":["478:41-478:46"]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":3341802155465124757,"detailed_name":"std::string libzippp::ZipEntry::getComment() const","short_name_offset":32,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\nDefines the comment of the entry. In order to call either one of those\nmethods, the corresponding ZipArchive must be open otherwise an empty string\nor false will be returned. Those methods are wrappers around ZipArchive::getEntryComment\nand ZipArchive::setEntryComment.","declarations":[{"spell":"486:21-486:31|10|2|1","param_spellings":[]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":16776462080445043001,"detailed_name":"bool libzippp::ZipEntry::setComment(const std::string &str) const","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"487:14-487:24|10|2|1","param_spellings":["487:44-487:47"]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":17036610170566083084,"detailed_name":"std::string libzippp::ZipEntry::readAsText(ZipArchive::State state = ZipArchive::CURRENT, libzippp_uint64 size = 0) const","short_name_offset":32,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\nRead the content of this ZipEntry as text. \nThe returned string will be of size getSize() if the latter is not specified or too big. \nIf the ZipArchive is not open, this method returns an\nempty string. This method is a wrapper around ZipArchive::readEntry(...).","declarations":[{"spell":"495:21-495:31|10|2|1","param_spellings":["495:50-495:55","495:93-495:97"]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":8695585460477002753,"detailed_name":"void *libzippp::ZipEntry::readAsBinary(ZipArchive::State state = ZipArchive::CURRENT, libzippp_uint64 size = 0) const","short_name_offset":26,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"\nRead the content of this ZipEntry as binary. \nThe returned void* will be of size getSize() if the latter is not specified or too big.\nIf the ZipArchive is not open, this method returns NULL. \nThe data must be deleted by the developer once not used anymore.\nThis method is a wrapper around ZipArchive::readEntry(...).","declarations":[{"spell":"504:15-504:27|10|2|1","param_spellings":["504:46-504:51","504:89-504:93"]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":2646667977328255446,"detailed_name":"int libzippp::ZipEntry::readContent(std::ostream &ofOutput, ZipArchive::State state = ZipArchive::CURRENT, libzippp_uint64 chunksize = 524288) const","short_name_offset":24,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nRead the specified ZipEntry of the ZipArchive and inserts its content in the provided reference to an already\nopened std::ofstream, gradually, with chunks of size \"chunksize\" to reduce memory usage when dealing with big files.\nThe method returns LIBZIPPP_OK if the extraction has succeeded with no problems, LIBZIPPP_ERROR_INVALID_PARAMETER if the \nofstream is not opened, LIBZIPPP_ERROR_NOT_OPEN if the archive is not opened, LIBZIPPP_ERROR_INVALID_ENTRY if the zipEntry \ndoesn't belong to the archive, LIBZIPPP_ERROR_FOPEN_FAILURE if zip_fopen_index() has failed, LIBZIPPP_ERROR_MEMORY_ALLOCATION if \na memory allocation has failed, LIBZIPPP_ERROR_FREAD_FAILURE if zip_fread() didn't succeed to read data, \nLIBZIPPP_ERROR_OWRITE_INDEX_FAILURE if the last ofstream operation has failed, LIBZIPPP_ERROR_OWRITE_FAILURE if fread() didn't \nreturn the exact amount of requested bytes and -9 if the amount of extracted bytes didn't match the size of the file (unknown error).\nIf the provided chunk size is zero, it will be defaulted to DEFAULT_CHUNK_SIZE (512KB).\nThe method doesn't close the ofstream after the extraction.","declarations":[{"spell":"518:13-518:24|10|2|1","param_spellings":["518:39-518:47","518:67-518:72","518:110-518:119"]}],"declaring_type":10,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":17748777366128102492,"detailed_name":"libzippp::ZipEntry::ZipEntry(const libzippp::ZipArchive *zipFile, const std::string &name, libzippp_uint64 index, time_t time, libzippp_uint16 compMethod, libzippp_uint16 encMethod, libzippp_uint64 size, libzippp_uint64 sizeComp, int crc)","short_name_offset":10,"short_name_size":8,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"531:9-531:17|10|2|2","extent":"531:9-532:176|10|2|0","declaring_type":10,"bases":[],"derived":[],"vars":[21,22,23,24,25,26,27,28,29],"uses":[],"callees":["532:35-532:45|5|3|292"]}],"vars":[{"id":0,"usr":14536921776853811055,"detailed_name":"libzippp::ZipArchive::OpenMode::NOT_OPEN","short_name_offset":32,"short_name_size":8,"hover":"libzippp::ZipArchive::OpenMode::NOT_OPEN = 0","comments":"","declarations":[],"spell":"110:13-110:21|12|2|2","extent":"110:13-110:21|12|2|0","type":12,"uses":["187:70-187:78|11|3|4"],"kind":22,"storage":0},{"id":1,"usr":11131070981010105615,"detailed_name":"libzippp::ZipArchive::OpenMode::READ_ONLY","short_name_offset":32,"short_name_size":9,"hover":"libzippp::ZipArchive::OpenMode::READ_ONLY = 1","comments":"","declarations":[],"spell":"111:13-111:22|12|2|2","extent":"111:13-111:22|12|2|0","type":12,"uses":["141:88-141:97|11|2|4","154:33-154:42|11|2|4","187:88-187:97|11|3|4","393:72-393:81|11|2|4"],"kind":22,"storage":0},{"id":2,"usr":16426313739690073369,"detailed_name":"libzippp::ZipArchive::OpenMode::WRITE","short_name_offset":32,"short_name_size":5,"hover":"libzippp::ZipArchive::OpenMode::WRITE = 2","comments":"","declarations":[],"spell":"112:13-112:18|12|2|2","extent":"112:13-112:18|12|2|0","type":12,"uses":[],"kind":22,"storage":0},{"id":3,"usr":7564688470218266630,"detailed_name":"libzippp::ZipArchive::OpenMode::NEW","short_name_offset":32,"short_name_size":3,"hover":"libzippp::ZipArchive::OpenMode::NEW = 3","comments":"","declarations":[],"spell":"113:13-113:16|12|2|2","extent":"113:13-113:16|12|2|0","type":12,"uses":[],"kind":22,"storage":0},{"id":4,"usr":8987199584455012569,"detailed_name":"libzippp::ZipArchive::State::ORIGINAL","short_name_offset":29,"short_name_size":8,"hover":"libzippp::ZipArchive::State::ORIGINAL = 0","comments":"","declarations":[],"spell":"122:13-122:21|13|2|2","extent":"122:13-122:21|13|2|0","type":13,"uses":[],"kind":22,"storage":0},{"id":5,"usr":16836611607112528607,"detailed_name":"libzippp::ZipArchive::State::CURRENT","short_name_offset":29,"short_name_size":7,"hover":"libzippp::ZipArchive::State::CURRENT = 1","comments":"","declarations":[],"spell":"123:13-123:20|13|2|2","extent":"123:13-123:20|13|2|0","type":13,"uses":["200:44-200:51|11|2|4","221:49-221:56|11|2|4","230:54-230:61|11|2|4","237:116-237:123|11|2|4","245:120-245:127|11|2|4","252:61-252:68|11|2|4","259:72-259:79|11|2|4","278:82-278:89|11|2|4","290:85-290:92|11|2|4","304:85-304:92|11|2|4","495:68-495:75|10|2|4","504:64-504:71|10|2|4","518:85-518:92|10|2|4"],"kind":22,"storage":0},{"id":6,"usr":15649538319009628045,"detailed_name":"std::string libzippp::ZipArchive::path","short_name_offset":34,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"386:21-386:25|11|2|2","extent":"386:9-386:25|11|2|0","type":15,"uses":["146:50-146:54|4|3|4"],"kind":8,"storage":0},{"id":7,"usr":620986758119705172,"detailed_name":"zip *libzippp::ZipArchive::zipHandle","short_name_offset":27,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"387:14-387:23|11|2|2","extent":"387:9-387:23|11|2|0","type":0,"uses":["182:49-182:58|10|3|12"],"kind":8,"storage":0},{"id":8,"usr":17140965762735876024,"detailed_name":"libzippp::ZipArchive::OpenMode libzippp::ZipArchive::mode","short_name_offset":53,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"389:18-389:22|11|2|2","extent":"389:9-389:22|11|2|0","type":12,"uses":["187:64-187:68|11|3|12","187:82-187:86|11|3|12","383:54-383:58|38|3|12"],"kind":8,"storage":0},{"id":9,"usr":1996125035287887228,"detailed_name":"std::string libzippp::ZipArchive::password","short_name_offset":34,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"390:21-390:29|11|2|2","extent":"390:9-390:29|11|2|0","type":15,"uses":["193:55-193:63|12|3|4"],"kind":8,"storage":0},{"id":10,"usr":6485569817095846585,"detailed_name":"libzippp::ZipArchive::State state","short_name_offset":28,"short_name_size":5,"hover":"libzippp::ZipArchive::State state=CURRENT","comments":"","declarations":[],"spell":"222:53-222:58|19|3|2","extent":"222:47-222:66|19|3|0","type":13,"uses":["222:96-222:101|19|3|12"],"kind":253,"storage":1},{"id":11,"usr":12760880074678913446,"detailed_name":"zip_source *libzippp::ZipArchive::zipSource","short_name_offset":34,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"388:21-388:30|11|2|2","extent":"388:9-388:30|11|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":12,"usr":14644231374366675006,"detailed_name":"const libzippp::ZipArchive *libzippp::ZipEntry::zipFile","short_name_offset":48,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"521:27-521:34|10|2|2","extent":"521:9-521:34|10|2|0","type":11,"uses":["414:35-414:42|43|3|20","470:49-470:56|57|3|12","532:17-532:24|65|3|20"],"kind":8,"storage":0},{"id":13,"usr":10177977801730557554,"detailed_name":"libzippp_uint64 libzippp::ZipEntry::index","short_name_offset":36,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"523:25-523:30|10|2|2","extent":"523:9-523:30|10|2|0","type":5,"uses":["414:50-414:55|43|3|20","425:62-425:67|46|3|12","532:47-532:52|65|3|20"],"kind":8,"storage":0},{"id":14,"usr":14971611845472040145,"detailed_name":"time_t libzippp::ZipEntry::time","short_name_offset":27,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"524:16-524:20|10|2|2","extent":"524:9-524:20|10|2|0","type":20,"uses":["414:60-414:64|43|3|20","430:52-430:56|47|3|12","532:61-532:65|65|3|20"],"kind":8,"storage":0},{"id":15,"usr":3104741837176750336,"detailed_name":"libzippp_uint16 libzippp::ZipEntry::compressionMethod","short_name_offset":36,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"525:25-525:42|10|2|2","extent":"525:9-525:42|10|2|0","type":7,"uses":["414:69-414:86|43|3|20","435:74-435:91|48|3|12","532:73-532:90|65|3|20"],"kind":8,"storage":0},{"id":16,"usr":1550839838474664564,"detailed_name":"libzippp_uint16 libzippp::ZipEntry::encryptionMethod","short_name_offset":36,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"526:25-526:41|10|2|2","extent":"526:9-526:41|10|2|0","type":7,"uses":["414:92-414:108|43|3|20","440:73-440:89|49|3|12","532:104-532:120|65|3|20"],"kind":8,"storage":0},{"id":17,"usr":3606880673550823012,"detailed_name":"libzippp_uint64 libzippp::ZipEntry::size","short_name_offset":36,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"527:25-527:29|10|2|2","extent":"527:9-527:29|10|2|0","type":5,"uses":["414:114-414:118|43|3|20","445:61-445:65|50|3|12","532:133-532:137|65|3|20"],"kind":8,"storage":0},{"id":18,"usr":2561686857629056543,"detailed_name":"libzippp_uint64 libzippp::ZipEntry::sizeComp","short_name_offset":36,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"528:25-528:33|10|2|2","extent":"528:9-528:33|10|2|0","type":5,"uses":["414:123-414:131|43|3|20","450:69-450:77|51|3|12","532:145-532:153|65|3|20"],"kind":8,"storage":0},{"id":19,"usr":17251937389974710399,"detailed_name":"int libzippp::ZipEntry::crc","short_name_offset":24,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"529:13-529:16|10|2|2","extent":"529:9-529:16|10|2|0","type":21,"uses":["414:136-414:139|43|3|20","455:48-455:51|52|3|12","532:165-532:168|65|3|20"],"kind":8,"storage":0},{"id":20,"usr":9755833232044136180,"detailed_name":"std::string libzippp::ZipEntry::name","short_name_offset":32,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"522:21-522:25|10|2|2","extent":"522:9-522:25|10|2|0","type":15,"uses":["420:57-420:61|45|3|4","460:73-460:77|53|3|4","532:35-532:39|65|3|20"],"kind":8,"storage":0},{"id":21,"usr":3251106306736489064,"detailed_name":"const libzippp::ZipArchive *zipFile","short_name_offset":28,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"531:36-531:43|65|3|2","extent":"531:18-531:43|65|3|0","type":11,"uses":["532:25-532:32|65|3|12"],"kind":253,"storage":1},{"id":22,"usr":5044447546579482848,"detailed_name":"const std::string &name","short_name_offset":19,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"531:64-531:68|65|3|2","extent":"531:45-531:68|65|3|0","type":15,"uses":["532:40-532:44|65|3|4"],"kind":253,"storage":1},{"id":23,"usr":740567653414978447,"detailed_name":"libzippp_uint64 index","short_name_offset":16,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"531:86-531:91|65|3|2","extent":"531:70-531:91|65|3|0","type":5,"uses":["532:53-532:58|65|3|12"],"kind":253,"storage":1},{"id":24,"usr":3307121645705397552,"detailed_name":"time_t time","short_name_offset":7,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"531:100-531:104|65|3|2","extent":"531:93-531:104|65|3|0","type":20,"uses":["532:66-532:70|65|3|12"],"kind":253,"storage":1},{"id":25,"usr":11614040948586670475,"detailed_name":"libzippp_uint16 compMethod","short_name_offset":16,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"531:122-531:132|65|3|2","extent":"531:106-531:132|65|3|0","type":7,"uses":["532:91-532:101|65|3|12"],"kind":253,"storage":1},{"id":26,"usr":26121592199261843,"detailed_name":"libzippp_uint16 encMethod","short_name_offset":16,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"531:150-531:159|65|3|2","extent":"531:134-531:159|65|3|0","type":7,"uses":["532:121-532:130|65|3|12"],"kind":253,"storage":1},{"id":27,"usr":5613428547879309318,"detailed_name":"libzippp_uint64 size","short_name_offset":16,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"531:177-531:181|65|3|2","extent":"531:161-531:181|65|3|0","type":5,"uses":["532:138-532:142|65|3|12"],"kind":253,"storage":1},{"id":28,"usr":7428922124915625294,"detailed_name":"libzippp_uint64 sizeComp","short_name_offset":16,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"531:199-531:207|65|3|2","extent":"531:183-531:207|65|3|0","type":5,"uses":["532:154-532:162|65|3|12"],"kind":253,"storage":1},{"id":29,"usr":3741843098263058909,"detailed_name":"int crc","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"531:213-531:216|65|3|2","extent":"531:209-531:216|65|3|0","type":21,"uses":["532:169-532:172|65|3|12"],"kind":253,"storage":1},{"id":30,"usr":11923849458676666772,"detailed_name":"LIBZIPPP_H","short_name_offset":0,"short_name_size":10,"hover":"#define LIBZIPPP_H","comments":"","declarations":[],"spell":"3:9-3:19|-1|1|2","extent":"3:9-3:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":11687724312398689185,"detailed_name":"ENTRY_PATH_SEPARATOR","short_name_offset":0,"short_name_size":20,"hover":"#define ENTRY_PATH_SEPARATOR '/'","comments":"","declarations":[],"spell":"47:9-47:29|-1|1|2","extent":"47:9-47:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":15183917663857733114,"detailed_name":"ENTRY_IS_DIRECTORY","short_name_offset":0,"short_name_size":18,"hover":"#define ENTRY_IS_DIRECTORY(str) ((str).length()>0 && (str)[(str).length()-1]==ENTRY_PATH_SEPARATOR)","comments":"","declarations":[],"spell":"48:9-48:27|-1|1|2","extent":"48:9-48:100|-1|1|0","uses":["460:54-460:72|-1|1|4"],"kind":255,"storage":0},{"id":33,"usr":1948674963426127475,"detailed_name":"DEFAULT_CHUNK_SIZE","short_name_offset":0,"short_name_size":18,"hover":"#define DEFAULT_CHUNK_SIZE 524288","comments":"","declarations":[],"spell":"49:9-49:27|-1|1|2","extent":"49:9-49:34|-1|1|0","uses":["304:120-304:138|-1|1|4","518:120-518:138|-1|1|4"],"kind":255,"storage":0},{"id":34,"usr":2211852429006155777,"detailed_name":"LIBZIPPP_SHARED_LIBRARY_EXPORT","short_name_offset":0,"short_name_size":30,"hover":"#define LIBZIPPP_SHARED_LIBRARY_EXPORT","comments":"","declarations":[],"spell":"68:17-68:47|-1|1|2","extent":"68:17-68:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":3181873071701925208,"detailed_name":"LIBZIPPP_SHARED_LIBRARY_IMPORT","short_name_offset":0,"short_name_size":30,"hover":"#define LIBZIPPP_SHARED_LIBRARY_IMPORT","comments":"","declarations":[],"spell":"69:17-69:47|-1|1|2","extent":"69:17-69:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":7164322991895353789,"detailed_name":"LIBZIPPP_API","short_name_offset":0,"short_name_size":12,"hover":"#define LIBZIPPP_API LIBZIPPP_SHARED_LIBRARY_IMPORT","comments":"","declarations":[],"spell":"76:17-76:29|-1|1|2","extent":"76:17-76:60|-1|1|0","uses":["99:11-99:23|-1|1|4","407:11-407:23|-1|1|4"],"kind":255,"storage":0},{"id":37,"usr":18306274190692925804,"detailed_name":"LIBZIPPP_OK","short_name_offset":0,"short_name_size":11,"hover":"#define LIBZIPPP_OK 0","comments":"","declarations":[],"spell":"80:9-80:20|-1|1|2","extent":"80:9-80:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":38,"usr":12549945542881288359,"detailed_name":"LIBZIPPP_ERROR_NOT_OPEN","short_name_offset":0,"short_name_size":23,"hover":"#define LIBZIPPP_ERROR_NOT_OPEN -1","comments":"","declarations":[],"spell":"81:9-81:32|-1|1|2","extent":"81:9-81:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":39,"usr":14825112969836704891,"detailed_name":"LIBZIPPP_ERROR_NOT_ALLOWED","short_name_offset":0,"short_name_size":26,"hover":"#define LIBZIPPP_ERROR_NOT_ALLOWED -2","comments":"","declarations":[],"spell":"82:9-82:35|-1|1|2","extent":"82:9-82:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":40,"usr":4609205257308211052,"detailed_name":"LIBZIPPP_ERROR_INVALID_ENTRY","short_name_offset":0,"short_name_size":28,"hover":"#define LIBZIPPP_ERROR_INVALID_ENTRY -3","comments":"","declarations":[],"spell":"83:9-83:37|-1|1|2","extent":"83:9-83:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":14911148814276106862,"detailed_name":"LIBZIPPP_ERROR_INVALID_PARAMETER","short_name_offset":0,"short_name_size":32,"hover":"#define LIBZIPPP_ERROR_INVALID_PARAMETER -4","comments":"","declarations":[],"spell":"84:9-84:41|-1|1|2","extent":"84:9-84:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":3693410807945171794,"detailed_name":"LIBZIPPP_ERROR_MEMORY_ALLOCATION","short_name_offset":0,"short_name_size":32,"hover":"#define LIBZIPPP_ERROR_MEMORY_ALLOCATION -16","comments":"","declarations":[],"spell":"85:9-85:41|-1|1|2","extent":"85:9-85:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":2256438841160295507,"detailed_name":"LIBZIPPP_ERROR_FOPEN_FAILURE","short_name_offset":0,"short_name_size":28,"hover":"#define LIBZIPPP_ERROR_FOPEN_FAILURE -25","comments":"","declarations":[],"spell":"86:9-86:37|-1|1|2","extent":"86:9-86:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":4784810224832919536,"detailed_name":"LIBZIPPP_ERROR_FREAD_FAILURE","short_name_offset":0,"short_name_size":28,"hover":"#define LIBZIPPP_ERROR_FREAD_FAILURE -26","comments":"","declarations":[],"spell":"87:9-87:37|-1|1|2","extent":"87:9-87:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":18094698422972687641,"detailed_name":"LIBZIPPP_ERROR_OWRITE_FAILURE","short_name_offset":0,"short_name_size":29,"hover":"#define LIBZIPPP_ERROR_OWRITE_FAILURE -35","comments":"","declarations":[],"spell":"88:9-88:38|-1|1|2","extent":"88:9-88:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":8048200150093275510,"detailed_name":"LIBZIPPP_ERROR_OWRITE_INDEX_FAILURE","short_name_offset":0,"short_name_size":35,"hover":"#define LIBZIPPP_ERROR_OWRITE_INDEX_FAILURE -36","comments":"","declarations":[],"spell":"89:9-89:44|-1|1|2","extent":"89:9-89:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":13519730059138075791,"detailed_name":"LIBZIPPP_ERROR_UNKNOWN","short_name_offset":0,"short_name_size":22,"hover":"#define LIBZIPPP_ERROR_UNKNOWN -99","comments":"","declarations":[],"spell":"90:9-90:31|-1|1|2","extent":"90:9-90:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["182:60-182:64|-1|1|4","414:43-414:47|-1|1|4","470:58-470:62|-1|1|4"],"kind":0,"storage":0}]}