16
{"last_modification_time":1575223851,"language":1,"import_file":"/home/duckonomy/Development/LoTide/TSAL/extern/portaudio/src/hostapi/coreaudio/pa_mac_core_blocking.c","args_hash":11184243650414851951,"includes":[{"line":61,"resolved_path":"/usr/include/pthread.h"},{"line":62,"resolved_path":"/usr/include/portaudio.h"}],"dependencies":["/home/duckonomy/Development/LoTide/TSAL/extern/portaudio/src/hostapi/coreaudio/pa_mac_core_blocking.c","/home/duckonomy/Development/LoTide/TSAL/extern/portaudio/src/hostapi/coreaudio/pa_mac_core_blocking.h","/usr/include/pthread.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/types.h","/usr/include/bits/uintn-identity.h","/usr/include/sched.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/sched.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/types/locale_t.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/portaudio.h","/usr/lib/clang/7.0.0/include/stddef.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/bits/types/__locale_t.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/endian.h","/usr/include/bits/timesize.h","/usr/include/bits/typesizes.h","/usr/include/bits/time64.h"],"skipped_by_preprocessor":["90:1-92:7","98:1-100:6","108:1-110:6"],"types":[{"id":0,"usr":5627659295015926587,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["120:1-120:8|-1|1|4","125:1-125:8|-1|1|4","158:1-158:8|-1|1|4","176:1-176:8|-1|1|4","189:1-189:8|-1|1|4"]},{"id":1,"usr":5870623425111228526,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["140:35-140:53|-1|1|4","141:42-141:60|-1|1|4"]}],"funcs":[{"id":0,"usr":12931360717350030765,"detailed_name":"PaError PaMacCore_SetUnixError(int err, int line)","short_name_offset":8,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"120:9-120:31|-1|1|1","param_spellings":["120:37-120:40","120:46-120:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":532287938342488057,"detailed_name":"PaError PaMacCore_SetError(int error, int line, int isError)","short_name_offset":8,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n Translates MacOS generated errors into PaErrors","declarations":[{"spell":"125:9-125:27|-1|1|1","param_spellings":["125:37-125:42","125:48-125:52","125:58-125:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":9055309131786933782,"detailed_name":"long computeRingBufferSize(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, long inputFramesPerBuffer, long outputFramesPerBuffer, double sampleRate)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n This function computes an appropriate ring buffer size given\n a requested latency (in seconds), sample rate and framesPerBuffer.\n\n The returned ringBufferSize is computed using the following\n constraints:\n   - it must be at least 4.\n   - it must be at least 3x framesPerBuffer.\n   - it must be at least 2x the suggestedLatency.\n   - it must be a power of 2.\n This function attempts to compute the minimum such size.","declarations":[{"spell":"140:6-140:27|-1|1|1","param_spellings":["140:55-140:70","141:62-141:78","142:41-142:61","143:41-143:62","144:43-144:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":11427164838375564106,"detailed_name":"int propertyProc(int inDevice, int inChannel, int isInput, int inPropertyID, void *inClientData)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"146:10-146:22|-1|1|1","param_spellings":["147:19-147:27","148:12-148:21","149:13-149:20","150:27-150:39","151:11-151:23"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":1401936927881259505,"detailed_name":"PaError AudioDeviceSetPropertyNowAndWaitForChange(int inDevice, int inChannel, int isInput, int inPropertyID, int inPropertyDataSize, const void *inPropertyData, void *outPropertyData)","short_name_offset":8,"short_name_size":41,"kind":12,"storage":1,"hover":"","comments":"sets the value of the given property and waits for the change to \nbe acknowledged, and returns the final value, which is not guaranteed\nby this function to be the same as the desired value. Obviously, this\nfunction can only be used for data whose input and output are the\nsame size and format, and their size and format are known in advance.","declarations":[{"spell":"158:9-158:50|-1|1|1","param_spellings":["159:19-159:27","160:12-160:21","161:13-161:20","162:27-162:39","163:12-163:30","164:17-164:31","165:11-165:26"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":17460250425831478627,"detailed_name":"PaError setBestSampleRateForDevice(const int device, const int isOutput, const int requireExact, const int desiredSrate)","short_name_offset":8,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"\n Sets the sample rate the HAL device.\n if requireExact: set the sample rate or fail.\n\n otherwise      : set the exact sample rate.\n             If that fails, check for available sample rates, and choose one\n             higher than the requested rate. If there isn't a higher one,\n             just use the highest available.","declarations":[{"spell":"176:9-176:35|-1|1|1","param_spellings":["176:57-176:63","177:48-177:56","178:48-178:60","179:51-179:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":3073842963812017266,"detailed_name":"PaError setBestFramesPerBuffer(const int device, const int isOutput, int requestedFramesPerBuffer, int *actualFramesPerBuffer)","short_name_offset":8,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n Attempts to set the requestedFramesPerBuffer. If it can't set the exact\n value, it settles for something smaller if available. If nothing smaller\n is available, it uses the smallest available size.\n actualFramesPerBuffer will be set to the actual value on successful return.\n OK to pass NULL to actualFramesPerBuffer.\n The logic is very simmilar too setBestSampleRate only failure here is\n not usually catastrophic.","declarations":[{"spell":"189:9-189:31|-1|1|1","param_spellings":["189:53-189:59","190:44-190:52","191:40-191:64","192:41-192:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":3835208880585240824,"detailed_name":"int xrunCallback(int inDevice, int inChannel, int isInput, int inPropertyID, void *inClientData)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n\nxrun handling","declarations":[{"spell":"201:10-201:22|-1|1|1","param_spellings":["202:19-202:27","203:12-203:21","204:13-204:20","205:27-205:39","206:11-206:23"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":7967210354484296981,"detailed_name":"int initializeXRunListenerList()","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"returns zero on success or a unix style error code.","declarations":[{"spell":"209:5-209:31|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":12096434120937050094,"detailed_name":"int destroyXRunListenerList()","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"returns zero on success or a unix style error code.","declarations":[{"spell":"211:5-211:28|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":2146261301450015726,"detailed_name":"void *addToXRunListenerList(void *stream)","short_name_offset":6,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"Returns the list, so that it can be passed to CorAudio.","declarations":[{"spell":"214:7-214:28|-1|1|1","param_spellings":["214:36-214:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":15736741097962656512,"detailed_name":"int removeFromXRunListenerList(void *stream)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Returns the number of Listeners in the list remaining.","declarations":[{"spell":"216:5-216:31|-1|1|1","param_spellings":["216:39-216:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":15020694205913719273,"detailed_name":"PA_MAC_CORE_UTILITIES_H__","short_name_offset":0,"short_name_size":25,"hover":"#define PA_MAC_CORE_UTILITIES_H__","comments":"","declarations":[],"spell":"60:9-60:34|-1|1|2","extent":"60:9-60:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":3897179025010944375,"detailed_name":"MIN","short_name_offset":0,"short_name_size":3,"hover":"#define MIN(a, b)  (((a)<(b))?(a):(b))","comments":"","declarations":[],"spell":"69:9-69:12|-1|1|2","extent":"69:9-69:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":16970137107661029200,"detailed_name":"MAX","short_name_offset":0,"short_name_size":3,"hover":"#define MAX(a, b)  (((a)<(b))?(b):(a))","comments":"","declarations":[],"spell":"73:9-73:12|-1|1|2","extent":"73:9-73:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":8351442873368454917,"detailed_name":"ERR","short_name_offset":0,"short_name_size":3,"hover":"#define ERR(mac_error) PaMacCore_SetError(mac_error, __LINE__, 1 )","comments":"","declarations":[],"spell":"76:9-76:12|-1|1|2","extent":"76:9-76:67|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":15573161751485163232,"detailed_name":"WARNING","short_name_offset":0,"short_name_size":7,"hover":"#define WARNING(mac_error) PaMacCore_SetError(mac_error, __LINE__, 0 )","comments":"","declarations":[],"spell":"77:9-77:16|-1|1|2","extent":"77:9-77:71|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":14089150893343851191,"detailed_name":"INPUT_ELEMENT","short_name_offset":0,"short_name_size":13,"hover":"#define INPUT_ELEMENT  (1)","comments":"","declarations":[],"spell":"81:9-81:22|-1|1|2","extent":"81:9-81:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":12643951975381040099,"detailed_name":"OUTPUT_ELEMENT","short_name_offset":0,"short_name_size":14,"hover":"#define OUTPUT_ELEMENT (0)","comments":"","declarations":[],"spell":"82:9-82:23|-1|1|2","extent":"82:9-82:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":15459748199903313410,"detailed_name":"MAC_CORE_DEBUG","short_name_offset":0,"short_name_size":14,"hover":"#define MAC_CORE_DEBUG","comments":"","declarations":[],"spell":"87:9-87:23|-1|1|2","extent":"87:9-87:23|-1|1|0","uses":["88:8-88:22|-1|1|4"],"kind":255,"storage":0},{"id":8,"usr":1736659830401427349,"detailed_name":"DBUG","short_name_offset":0,"short_name_size":4,"hover":"#define DBUG(MSG) do { printf(\"||PaMacCore (AUHAL)|| \"); printf MSG ; fflush(stdout); } while(0)","comments":"","declarations":[],"spell":"89:10-89:14|-1|1|2","extent":"89:10-89:98|-1|1|0","uses":[],"kind":255,"storage":0},{"id":9,"usr":4075465678044919520,"detailed_name":"VDBUG","short_name_offset":0,"short_name_size":5,"hover":"#define VDBUG(MSG)","comments":"","declarations":[],"spell":"101:10-101:15|-1|1|2","extent":"101:10-101:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":10,"usr":14692935523531100377,"detailed_name":"VVDBUG","short_name_offset":0,"short_name_size":6,"hover":"#define VVDBUG(MSG)","comments":"","declarations":[],"spell":"111:10-111:16|-1|1|2","extent":"111:10-111:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":11,"usr":7357844158382012662,"detailed_name":"UNIX_ERR","short_name_offset":0,"short_name_size":8,"hover":"#define UNIX_ERR(err) PaMacCore_SetUnixError( err, __LINE__ )","comments":"","declarations":[],"spell":"118:9-118:17|-1|1|2","extent":"118:9-118:62|-1|1|0","uses":[],"kind":255,"storage":0}]}