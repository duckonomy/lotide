16
{"last_modification_time":1575225632,"language":1,"import_file":"/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_front.c","args_hash":11184243650414851951,"includes":[{"line":48,"resolved_path":"/usr/include/portaudio.h"}],"dependencies":["/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_front.c","/usr/include/stdio.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/types.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/memory.h","/usr/include/string.h","/usr/include/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/stdlib.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/assert.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_util.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_stream.h","/usr/lib/clang/7.0.0/include/stddef.h","/usr/lib/clang/7.0.0/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/__sigset_t.h","/usr/include/portaudio.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_types.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_debugprint.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/timesize.h","/usr/include/bits/typesizes.h","/usr/include/bits/time64.h","/usr/include/bits/stdio_lim.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_endianness.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_trace.h","/home/duckonomy/Development/LoTide/lotide/extern/TSAL/extern/portaudio/src/common/pa_gitrevision.h"],"skipped_by_preprocessor":["65:1-68:7","70:1-72:7","76:1-79:7","83:1-86:7","90:1-93:7","97:1-100:7","104:1-107:7","110:1-112:7","116:1-119:7","123:1-126:7","130:1-133:7","137:1-140:7","144:1-147:7","151:1-154:7","156:1-159:7","359:1-361:7"],"types":[{"id":0,"usr":10625796666735419043,"detailed_name":"PaUtilPrivatePaFrontHostApiInfo","short_name_offset":0,"short_name_size":31,"kind":23,"hover":"","comments":"**FOR THE USE OF pa_front.c ONLY**\nDo NOT use fields in this structure, they my change at any time.\nUse functions defined in pa_util.h if you think you need functionality\nwhich can be derived from here.","declarations":[],"spell":"167:16-167:47|-1|1|2","extent":"167:9-171:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0],"instances":[],"uses":[]},{"id":1,"usr":11390626963201118764,"detailed_name":"PaUtilPrivatePaFrontHostApiInfo","short_name_offset":0,"short_name_size":31,"kind":252,"hover":"","comments":"","declarations":[],"spell":"171:2-171:33|-1|1|2","extent":"167:1-171:33|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4],"uses":["171:2-171:33|-1|1|4","195:5-195:36|-1|1|4"]},{"id":2,"usr":10,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,3],"uses":[]},{"id":3,"usr":7346750859755795772,"detailed_name":"PaUtilHostApiSpecificStreamInfoHeader","short_name_offset":0,"short_name_size":37,"kind":23,"hover":"","comments":"The common header for all data structures whose pointers are passed through\nthe hostApiSpecificStreamInfo field of the PaStreamParameters structure.\nNote that in order to keep the public PortAudio interface clean, this structure\nis not used explicitly when declaring hostApiSpecificStreamInfo data structures.\nHowever, some code in pa_front depends on the first 3 members being equivalent\nwith this structure.\n@see PaStreamParameters","declarations":[],"spell":"182:16-182:53|-1|1|2","extent":"182:9-187:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[1,2,3],"instances":[],"uses":[]},{"id":4,"usr":1002155624363006873,"detailed_name":"PaUtilHostApiSpecificStreamInfoHeader","short_name_offset":0,"short_name_size":37,"kind":252,"hover":"","comments":"","declarations":[],"spell":"187:3-187:40|-1|1|2","extent":"182:1-187:40|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["187:3-187:40|-1|1|4"]},{"id":5,"usr":16278802996125123635,"detailed_name":"PaHostApiTypeId","short_name_offset":0,"short_name_size":15,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2],"uses":["185:5-185:20|-1|1|4"]},{"id":6,"usr":17410634111619582566,"detailed_name":"PaUtilHostApiRepresentation","short_name_offset":0,"short_name_size":27,"kind":23,"hover":"","comments":"A structure representing the interface to a host API. Contains both\nconcrete data and pointers to functions which implement the interface.","declarations":[],"spell":"194:16-194:43|-1|1|2","extent":"194:9-325:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[4,5,6,7,8,9],"instances":[],"uses":["213:31-213:58|-1|1|4","310:35-310:62|-1|1|4","321:42-321:69|-1|1|4"]},{"id":7,"usr":17489500782335375863,"detailed_name":"PaUtilHostApiRepresentation","short_name_offset":0,"short_name_size":27,"kind":252,"hover":"","comments":"","declarations":[],"spell":"325:3-325:30|-1|1|2","extent":"194:1-325:30|-1|1|0","alias_of":6,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["325:3-325:30|-1|1|4","339:43-339:70|-1|1|4"]},{"id":8,"usr":8345336662099475443,"detailed_name":"PaHostApiInfo","short_name_offset":0,"short_name_size":13,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[5],"uses":["204:5-204:18|-1|1|4"]},{"id":9,"usr":10320230998784953051,"detailed_name":"PaDeviceInfo","short_name_offset":0,"short_name_size":12,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6],"uses":["206:5-206:17|-1|1|4"]},{"id":10,"usr":5627659295015926587,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["310:5-310:12|-1|1|4","321:5-321:12|-1|1|4","339:9-339:16|-1|1|4"]},{"id":11,"usr":3261179025952685036,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["311:28-311:36|-1|1|4"]},{"id":12,"usr":5870623425111228526,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["312:34-312:52|-1|1|4","313:34-313:52|-1|1|4","322:41-322:59|-1|1|4","323:41-323:59|-1|1|4"]},{"id":13,"usr":11380181867737723979,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["316:28-316:41|-1|1|4"]},{"id":14,"usr":5982467415263176434,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["317:28-317:44|-1|1|4"]},{"id":15,"usr":2997333243831835162,"detailed_name":"PaUtilHostApiInitializer","short_name_offset":0,"short_name_size":24,"kind":252,"hover":"typedef PaError PaUtilHostApiInitializer( PaUtilHostApiRepresentation**, PaHostApiIndex )","comments":"Prototype for the initialization function which must be implemented by every\nhost API.\n\nThis function should only return an error other than paNoError if it encounters \nan unexpected and fatal error (memory allocation error for example). In general, \nthere may be conditions under which it returns a NULL interface pointer and also \nreturns paNoError. For example, if the ASIO implementation detects that ASIO is \nnot installed, it should return a NULL interface, and paNoError.\n\n@see paHostApiInitializers","declarations":[],"spell":"339:17-339:41|-1|1|2","extent":"339:1-339:90|-1|1|0","alias_of":10,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10],"uses":["339:17-339:41|-1|1|4","356:8-356:32|-1|1|4"]},{"id":16,"usr":15601100545039621989,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["339:74-339:88|-1|1|4"]}],"funcs":[],"vars":[{"id":0,"usr":9572091366110770587,"detailed_name":"unsigned long PaUtilPrivatePaFrontHostApiInfo::baseDeviceIndex","short_name_offset":47,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"170:19-170:34|0|2|2","extent":"170:5-170:34|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":1,"usr":6976435601034962756,"detailed_name":"unsigned long PaUtilHostApiSpecificStreamInfoHeader::size","short_name_offset":53,"short_name_size":4,"hover":"","comments":"size of whole structure including this header","declarations":[],"spell":"184:19-184:23|3|2|2","extent":"184:5-184:23|3|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":2,"usr":5062581193839310677,"detailed_name":"PaHostApiTypeId PaUtilHostApiSpecificStreamInfoHeader::hostApiType","short_name_offset":55,"short_name_size":11,"hover":"","comments":"host API for which this data is intended","declarations":[],"spell":"185:21-185:32|3|2|2","extent":"185:5-185:32|3|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":3,"usr":9171845173328169860,"detailed_name":"unsigned long PaUtilHostApiSpecificStreamInfoHeader::version","short_name_offset":53,"short_name_size":7,"hover":"","comments":"structure version","declarations":[],"spell":"186:19-186:26|3|2|2","extent":"186:5-186:26|3|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":4,"usr":10638071468179180275,"detailed_name":"PaUtilPrivatePaFrontHostApiInfo PaUtilHostApiRepresentation::privatePaFrontInfo","short_name_offset":61,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"195:37-195:55|6|2|2","extent":"195:5-195:55|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":5,"usr":14932887561318390581,"detailed_name":"PaHostApiInfo PaUtilHostApiRepresentation::info","short_name_offset":43,"short_name_size":4,"hover":"","comments":"The host api implementation should populate the info field. In the\ncase of info.defaultInputDevice and info.defaultOutputDevice the\nvalues stored should be 0 based indices within the host api's own\ndevice index range (0 to deviceCount). These values will be converted\nto global device indices by pa_front after PaUtilHostApiInitializer()\nreturns.","declarations":[],"spell":"204:19-204:23|6|2|2","extent":"204:5-204:23|6|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":6,"usr":7935718077126456778,"detailed_name":"PaDeviceInfo **PaUtilHostApiRepresentation::deviceInfos","short_name_offset":44,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"206:20-206:31|6|2|2","extent":"206:5-206:31|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":7,"usr":12212047769164897227,"detailed_name":"void (*)(struct PaUtilHostApiRepresentation *) PaUtilHostApiRepresentation::Terminate","short_name_offset":76,"short_name_size":9,"hover":"","comments":"\n (*Terminate)() is guaranteed to be called with a valid <hostApi>\n parameter, which was previously returned from the same implementation's\n initializer.","declarations":[],"spell":"213:12-213:21|6|2|2","extent":"213:5-213:69|6|2|0","uses":[],"kind":8,"storage":0},{"id":8,"usr":8974776188771326498,"detailed_name":"PaError (*)(struct PaUtilHostApiRepresentation *, PaStream **, const PaStreamParameters *, const PaStreamParameters *, double, unsigned long, PaStreamFlags, PaStreamCallback *, void *) PaUtilHostApiRepresentation::OpenStream","short_name_offset":214,"short_name_size":10,"hover":"","comments":"\n The inputParameters and outputParameters pointers should not be saved\n as they will not remain valid after OpenStream is called.\n\n \n The following guarantees are made about parameters to (*OpenStream)():\n\n     [NOTE: the following list up to *END PA FRONT VALIDATIONS* should be\n         kept in sync with the one for ValidateOpenStreamParameters and\n         Pa_OpenStream in pa_front.c]\n         \n     PaHostApiRepresentation *hostApi\n         - is valid for this implementation\n\n     PaStream** stream\n         - is non-null\n\n     - at least one of inputParameters & outputParmeters is valid (not NULL)\n\n     - if inputParameters & outputParmeters are both valid, that\n         inputParameters->device & outputParmeters->device  both use the same host api\n\n     PaDeviceIndex inputParameters->device\n         - is within range (0 to Pa_CountDevices-1) Or:\n         - is paUseHostApiSpecificDeviceSpecification and\n             inputParameters->hostApiSpecificStreamInfo is non-NULL and refers\n             to a valid host api\n\n     int inputParameters->numChannels\n         - if inputParameters->device is not paUseHostApiSpecificDeviceSpecification, numInputChannels is > 0\n         - upper bound is NOT validated against device capabilities\n\n     PaSampleFormat inputParameters->sampleFormat\n         - is one of the sample formats defined in portaudio.h\n\n     void *inputParameters->hostApiSpecificStreamInfo\n         - if supplied its hostApi field matches the input device's host Api\n\n     PaDeviceIndex outputParmeters->device\n         - is within range (0 to Pa_CountDevices-1)\n\n     int outputParmeters->numChannels\n         - if inputDevice is valid, numInputChannels is > 0\n         - upper bound is NOT validated against device capabilities\n\n     PaSampleFormat outputParmeters->sampleFormat\n         - is one of the sample formats defined in portaudio.h\n \n     void *outputParmeters->hostApiSpecificStreamInfo\n         - if supplied its hostApi field matches the output device's host Api\n\n     double sampleRate\n         - is not an 'absurd' rate (less than 1000. or greater than 384000.)\n         - sampleRate is NOT validated against device capabilities\n\n     PaStreamFlags streamFlags\n         - unused platform neutral flags are zero\n         - paNeverDropInput is only used for full-duplex callback streams\n             with variable buffer size (paFramesPerBufferUnspecified)\n\n     [*END PA FRONT VALIDATIONS*]\n\n\n The following validations MUST be performed by (*OpenStream)():\n\n     - check that input device can support numInputChannels\n     \n     - check that input device can support inputSampleFormat, or that\n         we have the capability to convert from outputSampleFormat to\n         a native format\n\n     - if inputStreamInfo is supplied, validate its contents,\n         or return an error if no inputStreamInfo is expected\n\n     - check that output device can support numOutputChannels\n     \n     - check that output device can support outputSampleFormat, or that\n         we have the capability to convert from outputSampleFormat to\n         a native format\n\n     - if outputStreamInfo is supplied, validate its contents,\n         or return an error if no outputStreamInfo is expected\n\n     - if a full duplex stream is requested, check that the combination\n         of input and output parameters is supported\n\n     - check that the device supports sampleRate\n\n     - alter sampleRate to a close allowable rate if necessary\n\n     - validate inputLatency and outputLatency\n\n     - validate any platform specific flags, if flags are supplied they\n         must be valid.","declarations":[],"spell":"310:15-310:25|6|2|2","extent":"310:5-318:44|6|2|0","uses":[],"kind":8,"storage":0},{"id":9,"usr":1260674549220692115,"detailed_name":"PaError (*)(struct PaUtilHostApiRepresentation *, const PaStreamParameters *, const PaStreamParameters *, double) PaUtilHostApiRepresentation::IsFormatSupported","short_name_offset":143,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"321:15-321:32|6|2|2","extent":"321:5-324:54|6|2|0","uses":[],"kind":8,"storage":0},{"id":10,"usr":16657314783707991129,"detailed_name":"PaUtilHostApiInitializer *[] paHostApiInitializers","short_name_offset":29,"short_name_size":21,"hover":"","comments":"paHostApiInitializers is a NULL-terminated array of host API initialization\nfunctions. These functions are called by pa_front.c to initialize the host APIs\nwhen the client calls Pa_Initialize(). \n\nThe initialization functions are invoked in order.\n\nThe first successfully initialized host API that has a default input *or* output \ndevice is used as the default PortAudio host API. This is based on the logic that\nthere is only one default host API, and it must contain the default input and output\ndevices (if defined).\n\nThere is a platform specific file that defines paHostApiInitializers for that\nplatform, pa_win/pa_win_hostapis.c contains the Win32 definitions for example.","declarations":["356:34-356:55|-1|1|1"],"type":15,"uses":[],"kind":13,"storage":2},{"id":11,"usr":8429956350737580223,"detailed_name":"PA_HOSTAPI_H","short_name_offset":0,"short_name_size":12,"hover":"#define PA_HOSTAPI_H","comments":"","declarations":[],"spell":"2:9-2:21|-1|1|2","extent":"2:9-2:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":12,"usr":13385248428916222424,"detailed_name":"PA_USE_SKELETON","short_name_offset":0,"short_name_size":15,"hover":"#define PA_USE_SKELETON 0","comments":"","declarations":[],"spell":"64:9-64:24|-1|1|2","extent":"64:9-64:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":13,"usr":10965871357588034796,"detailed_name":"PA_USE_ASIO","short_name_offset":0,"short_name_size":11,"hover":"#define PA_USE_ASIO 0","comments":"","declarations":[],"spell":"75:9-75:20|-1|1|2","extent":"75:9-75:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":14,"usr":8830208248206000212,"detailed_name":"PA_USE_DS","short_name_offset":0,"short_name_size":9,"hover":"#define PA_USE_DS 0","comments":"","declarations":[],"spell":"82:9-82:18|-1|1|2","extent":"82:9-82:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":15,"usr":2214666183558969910,"detailed_name":"PA_USE_WMME","short_name_offset":0,"short_name_size":11,"hover":"#define PA_USE_WMME 0","comments":"","declarations":[],"spell":"89:9-89:20|-1|1|2","extent":"89:9-89:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":16,"usr":6004115751434125645,"detailed_name":"PA_USE_WASAPI","short_name_offset":0,"short_name_size":13,"hover":"#define PA_USE_WASAPI 0","comments":"","declarations":[],"spell":"96:9-96:22|-1|1|2","extent":"96:9-96:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":17,"usr":270719425633054381,"detailed_name":"PA_USE_WDMKS","short_name_offset":0,"short_name_size":12,"hover":"#define PA_USE_WDMKS 0","comments":"","declarations":[],"spell":"103:9-103:21|-1|1|2","extent":"103:9-103:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":18,"usr":8300603753573570436,"detailed_name":"PA_USE_OSS","short_name_offset":0,"short_name_size":10,"hover":"#define PA_USE_OSS 0","comments":"","declarations":[],"spell":"115:9-115:19|-1|1|2","extent":"115:9-115:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":19,"usr":14515644693664313785,"detailed_name":"PA_USE_ALSA","short_name_offset":0,"short_name_size":11,"hover":"#define PA_USE_ALSA 0","comments":"","declarations":[],"spell":"122:9-122:20|-1|1|2","extent":"122:9-122:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":20,"usr":4218600346132723397,"detailed_name":"PA_USE_JACK","short_name_offset":0,"short_name_size":11,"hover":"#define PA_USE_JACK 0","comments":"","declarations":[],"spell":"129:9-129:20|-1|1|2","extent":"129:9-129:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":21,"usr":11659546472804618368,"detailed_name":"PA_USE_SGI","short_name_offset":0,"short_name_size":10,"hover":"#define PA_USE_SGI 0","comments":"","declarations":[],"spell":"136:9-136:19|-1|1|2","extent":"136:9-136:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":13385330800349403757,"detailed_name":"PA_USE_COREAUDIO","short_name_offset":0,"short_name_size":16,"hover":"#define PA_USE_COREAUDIO 0","comments":"","declarations":[],"spell":"143:9-143:25|-1|1|2","extent":"143:9-143:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":8008536509789775827,"detailed_name":"PA_USE_ASIHPI","short_name_offset":0,"short_name_size":13,"hover":"#define PA_USE_ASIHPI 0","comments":"","declarations":[],"spell":"150:9-150:22|-1|1|2","extent":"150:9-150:24|-1|1|0","uses":[],"kind":255,"storage":0}]}