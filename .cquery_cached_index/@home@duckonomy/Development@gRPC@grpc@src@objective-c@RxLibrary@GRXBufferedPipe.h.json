16
{"last_modification_time":1574089038,"language":3,"import_file":"/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXBufferedPipe.m","args_hash":11184243650414851951,"includes":[{"line":20,"resolved_path":"/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriteable.h"},{"line":21,"resolved_path":"/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriter.h"}],"dependencies":["/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXBufferedPipe.m","/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriteable.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":13151420407897409651,"detailed_name":"GRXBufferedPipe","short_name_offset":0,"short_name_size":15,"kind":5,"hover":"","comments":"\nA buffered pipe is a Writer that also acts as a Writeable.\nOnce it is started, whatever values are written into it (via -writeValue:) will be propagated\nimmediately, unless flow control prevents it.\nIf it is throttled and keeps receiving values, as well as if it receives values before being\nstarted, it will buffer them and propagate them in order as soon as its state becomes Started.\nIf it receives an end of stream (via -writesFinishedWithError:), it will buffer the EOS after the\nlast buffered value and issue it to the writeable after all buffered values are issued.\n\nBeware that a pipe of this type can't prevent receiving more values when it is paused (for\nexample if used to write data to a congested network connection). Because in such situations the\npipe will keep buffering all data written to it, your application could run out of memory and\ncrash. If you want to react to flow control signals to prevent that, instead of using this class\nyou can implement an object that conforms to GRXWriter.\n\nThread-safety: the methods of this class are thread-safe.","declarations":[],"spell":"41:12-41:27|-1|1|2","extent":"41:1-46:5|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":1247088855879664134,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["41:40-41:52|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":4642885730747170048,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["44:4-44:16|-1|1|4"]}],"funcs":[{"id":0,"usr":1759713973470365926,"detailed_name":"+ (instancetype)pipe","short_name_offset":16,"short_name_size":4,"kind":254,"storage":0,"hover":"","comments":"Convenience constructor.","declarations":[{"spell":"44:17-44:21|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[]}