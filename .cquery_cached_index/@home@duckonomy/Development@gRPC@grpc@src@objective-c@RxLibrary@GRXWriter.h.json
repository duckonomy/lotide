16
{"last_modification_time":1574089038,"language":3,"import_file":"/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriter.m","args_hash":11184243650414851951,"includes":[{"line":20,"resolved_path":"/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriteable.h"}],"dependencies":["/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriter.m","/home/duckonomy/Development/gRPC/grpc/src/objective-c/RxLibrary/GRXWriteable.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2],"uses":[]},{"id":1,"usr":1382746906061236996,"detailed_name":"GRXWriter","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"\nAn GRXWriter object can produce, on demand, a sequence of values. The sequence may be produced\nasynchronously, and it may consist of any number of elements, including none or an infinite\nnumber.\n\nGRXWriter is the active dual of NSEnumerator. The difference between them is thus whether the\nobject plays an active or passive role during usage: A user of NSEnumerator pulls values off it,\nand passes the values to a writeable. A user of GRXWriter, though, just gives it a writeable, and\nthe GRXWriter instance pushes values to the writeable. This makes this protocol suitable to\nrepresent a sequence of future values, as well as collections with internal iteration.\n\nAn instance of GRXWriter can start producing values after a writeable is passed to it. It can\nalso be commanded to finish the sequence immediately (with an optional error). Finally, it can be\nasked to pause, and resumed later. All GRXWriter objects support pausing and early termination.\n\nThread-safety:\n\nState transitions take immediate effect if the object is used from a single thread. Subclasses\nmight offer stronger guarantees.\n\nUnless otherwise indicated by a conforming subclass, no messages should be sent concurrently to a\nGRXWriter. I.e., conforming classes aren't required to be thread-safe.","declarations":[],"spell":"77:12-77:21|-1|1|2","extent":"77:1-106:5|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[1,2,3,4],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":1247088855879664134,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["97:32-97:44|-1|1|4"]}],"funcs":[{"id":0,"usr":12300002248388582949,"detailed_name":"int NS_ENUM(NSInteger, GRXWriterState)","short_name_offset":4,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"States of a writer.","declarations":[],"spell":"24:9-24:16|-1|1|2","extent":"24:1-52:2|-1|1|0","bases":[],"derived":[],"vars":[0,1],"uses":[],"callees":[]},{"id":1,"usr":18194168595998177015,"detailed_name":"- (int)state","short_name_offset":7,"short_name_size":5,"kind":6,"storage":0,"hover":"","comments":"","declarations":[{"spell":"0:0-0:0|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":12205550427314126181,"detailed_name":"- (void)setState:(int)state","short_name_offset":8,"short_name_size":9,"kind":6,"storage":0,"hover":"","comments":"","declarations":[{"spell":"0:0-0:0|1|2|1","param_spellings":["85:26-85:31"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":17822267211639316473,"detailed_name":"- (void)startWithWriteable:(id<GRXWriteable>)writeable","short_name_offset":8,"short_name_size":19,"kind":6,"storage":0,"hover":"","comments":"\nTransition to the Started state, and start sending messages to the writeable (a reference to it\nis retained). Messages to the writeable may be sent before the method returns, or they may be\nsent later in the future. See GRXWriteable.h for the different messages a writeable can receive.\n\nIf this writer draws its values from an external source (e.g. from the filesystem or from a\nserver), calling this method will commonly trigger side effects (like network connections).\n\nThis method might only be called on writers in the NotStarted state.","declarations":[{"spell":"97:9-97:27|1|2|1","param_spellings":["97:46-97:55"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":15878656979329200426,"detailed_name":"- (void)finishWithError:(id)errorOrNil","short_name_offset":8,"short_name_size":16,"kind":6,"storage":0,"hover":"","comments":"\nSend writesFinishedWithError:errorOrNil to the writeable. Then release the reference to it and\ntransition to the Finished state.\n\nThis method might only be called on writers in the Started or Paused state.","declarations":[{"spell":"105:9-105:24|1|2|1","param_spellings":["105:36-105:46"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":7358307999553626445,"detailed_name":"int NSInteger","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"24:17-24:26|0|3|2","extent":"24:17-24:26|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":5098730883536286076,"detailed_name":"int GRXWriterState","short_name_offset":4,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"24:28-24:42|0|3|2","extent":"24:28-24:42|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":2,"usr":8992430963022827837,"detailed_name":"int GRXWriter::state","short_name_offset":15,"short_name_size":5,"hover":"","comments":"\nThis property can be used to query the current state of the writer, which determines how it might\ncurrently use its writeable. Some state transitions can be triggered by setting this property to\nthe corresponding value, and that's useful for advanced use cases like pausing an writer. For\nmore details, see the documentation of the enum further down. The property is thread safe.","declarations":["85:26-85:31|1|2|1"],"type":0,"uses":[],"kind":7,"storage":0}]}