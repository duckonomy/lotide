16
{"last_modification_time":1575223631,"language":1,"import_file":"/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_process.c","args_hash":11184243650414851951,"includes":[{"line":202,"resolved_path":"/usr/include/portaudio.h"},{"line":203,"resolved_path":"/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_converters.h"},{"line":204,"resolved_path":"/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_dither.h"}],"dependencies":["/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_process.c","/usr/include/assert.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/string.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/types/locale_t.h","/usr/include/strings.h","/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_converters.h","/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_dither.h","/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_util.h","/usr/lib/clang/7.0.0/include/stddef.h","/usr/include/bits/types/__locale_t.h","/usr/include/portaudio.h","/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_types.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h"],"skipped_by_preprocessor":["207:1-210:7","751:1-753:7"],"types":[{"id":0,"usr":13664268315219151221,"detailed_name":"(anon enum)","short_name_offset":0,"short_name_size":11,"kind":10,"hover":"","comments":"@brief Mode flag passed to PaUtil_InitializeBufferProcessor indicating the type\nof buffering that the host API uses.\n\nThe mode used depends on whether the host API or the implementation manages\nthe buffers, and how these buffers are used (scatter gather, circular buffer).","declarations":[],"spell":"219:9-219:13|-1|1|2","extent":"219:9-237:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":11912583417403431459,"detailed_name":"PaUtilHostBufferSizeMode","short_name_offset":0,"short_name_size":24,"kind":252,"hover":"","comments":"","declarations":[],"spell":"237:2-237:26|-1|1|2","extent":"219:1-237:26|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8],"uses":["237:2-237:26|-1|1|4","257:5-257:29|-1|1|4","386:13-386:37|-1|1|4"]},{"id":2,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[9,10,11,16,22,35,38],"uses":[]},{"id":3,"usr":10498022441690516725,"detailed_name":"PaUtilChannelDescriptor","short_name_offset":0,"short_name_size":23,"kind":23,"hover":"","comments":"@brief An auxilliary data structure used internally by the buffer processor\nto represent host input and output buffers.","declarations":[],"spell":"242:16-242:39|-1|1|2","extent":"242:9-245:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[4,5],"instances":[],"uses":[]},{"id":4,"usr":2926759335647331934,"detailed_name":"PaUtilChannelDescriptor","short_name_offset":0,"short_name_size":23,"kind":252,"hover":"","comments":"","declarations":[],"spell":"245:2-245:25|-1|1|2","extent":"242:1-245:25|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[37,40],"uses":["245:2-245:25|-1|1|4","294:5-294:28|-1|1|4","301:5-301:28|-1|1|4"]},{"id":5,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4,27,28,30,31,44],"uses":[]},{"id":6,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[5,13,14,15,19,20,21],"uses":[]},{"id":7,"usr":5939464301260667583,"detailed_name":"(anon struct)","short_name_offset":0,"short_name_size":13,"kind":23,"hover":"","comments":"@brief The main buffer processor data structure.\n\nAllocate one of these, initialize it with PaUtil_InitializeBufferProcessor\nand terminate it with PaUtil_TerminateBufferProcessor.","declarations":[],"spell":"253:9-253:15|-1|1|2","extent":"253:9-313:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"instances":[],"uses":[]},{"id":8,"usr":9620691145431968460,"detailed_name":"PaUtilBufferProcessor","short_name_offset":0,"short_name_size":21,"kind":252,"hover":"","comments":"","declarations":[],"spell":"313:3-313:24|-1|1|2","extent":"253:1-313:24|-1|1|0","alias_of":7,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["313:3-313:24|-1|1|4","377:43-377:64|-1|1|4","397:39-397:60|-1|1|4","406:35-406:56|-1|1|4","417:60-417:81|-1|1|4","427:61-427:82|-1|1|4","451:33-451:54|-1|1|4","462:25-462:46|-1|1|4","474:30-474:51|-1|1|4","488:42-488:63|-1|1|4","499:44-499:65|-1|1|4","506:36-506:57|-1|1|4","512:33-512:54|-1|1|4","518:45-518:66|-1|1|4","524:47-524:68|-1|1|4","539:34-539:55|-1|1|4","548:26-548:47|-1|1|4","560:31-560:52|-1|1|4","574:43-574:64|-1|1|4","585:45-585:66|-1|1|4","592:37-592:58|-1|1|4","598:34-598:55|-1|1|4","604:46-604:67|-1|1|4","610:48-610:69|-1|1|4","632:36-632:57|-1|1|4","659:43-659:64|-1|1|4","674:42-674:63|-1|1|4","704:33-704:54|-1|1|4","729:34-729:55|-1|1|4","744:34-744:55|-1|1|4"]},{"id":9,"usr":10,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,7,12,25,26,29,32,36,39],"uses":[]},{"id":10,"usr":15026529127637134207,"detailed_name":"PaUtilConverter","short_name_offset":0,"short_name_size":15,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[17,23],"uses":["267:5-267:20|-1|1|4","274:5-274:20|-1|1|4"]},{"id":11,"usr":3341854074869442442,"detailed_name":"PaUtilZeroer","short_name_offset":0,"short_name_size":12,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[18,24],"uses":["268:5-268:17|-1|1|4","275:5-275:17|-1|1|4"]},{"id":12,"usr":6711618858683360734,"detailed_name":"PaStreamCallbackTimeInfo","short_name_offset":0,"short_name_size":24,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[33],"uses":["288:5-288:29|-1|1|4","633:9-633:33|-1|1|4"]},{"id":13,"usr":8031441084338055163,"detailed_name":"PaStreamCallbackFlags","short_name_offset":0,"short_name_size":21,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[34],"uses":["290:5-290:26|-1|1|4","633:45-633:66|-1|1|4"]},{"id":14,"usr":11544433385151868528,"detailed_name":"PaUtilTriangularDitherGenerator","short_name_offset":0,"short_name_size":31,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[41],"uses":["307:5-307:36|-1|1|4"]},{"id":15,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[42],"uses":[]},{"id":16,"usr":5982467415263176434,"detailed_name":"PaStreamCallback","short_name_offset":0,"short_name_size":16,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[43],"uses":["311:5-311:21|-1|1|4","387:13-387:29|-1|1|4"]},{"id":17,"usr":5627659295015926587,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["377:1-377:8|-1|1|4"]},{"id":18,"usr":15571723388178962171,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["378:36-378:50|-1|1|4","379:13-379:27|-1|1|4","380:37-380:51|-1|1|4","381:13-381:27|-1|1|4"]},{"id":19,"usr":11380181867737723979,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["383:13-383:26|-1|1|4"]}],"funcs":[{"id":0,"usr":136229571082379740,"detailed_name":"PaError PaUtil_InitializeBufferProcessor(PaUtilBufferProcessor *bufferProcessor, int inputChannelCount, PaSampleFormat userInputSampleFormat, PaSampleFormat hostInputSampleFormat, int outputChannelCount, PaSampleFormat userOutputSampleFormat, PaSampleFormat hostOutputSampleFormat, double sampleRate, PaStreamFlags streamFlags, unsigned long framesPerUserBuffer, unsigned long framesPerHostBuffer, PaUtilHostBufferSizeMode hostBufferSizeMode, PaStreamCallback *streamCallback, void *userData)","short_name_offset":8,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"Initialize a buffer processor's representation stored in a\nPaUtilBufferProcessor structure. Be sure to call\nPaUtil_TerminateBufferProcessor after finishing with a buffer processor.\n\n@param bufferProcessor The buffer processor structure to initialize.\n\n@param inputChannelCount The number of input channels as passed to\nPa_OpenStream or 0 for an output-only stream.\n\n@param userInputSampleFormat Format of user input samples, as passed to\nPa_OpenStream. This parameter is ignored for ouput-only streams.\n\n@param hostInputSampleFormat Format of host input samples. This parameter is\nignored for output-only streams. See note about host buffer interleave below.\n\n@param outputChannelCount The number of output channels as passed to\nPa_OpenStream or 0 for an input-only stream.\n\n@param userOutputSampleFormat Format of user output samples, as passed to\nPa_OpenStream. This parameter is ignored for input-only streams.\n\n@param hostOutputSampleFormat Format of host output samples. This parameter is\nignored for input-only streams. See note about host buffer interleave below.\n\n@param sampleRate Sample rate of the stream. The more accurate this is the\nbetter - it is used for updating time stamps when adapting buffers.\n\n@param streamFlags Stream flags as passed to Pa_OpenStream, this parameter is\nused for selecting special sample conversion options such as clipping and\ndithering.\n\n@param framesPerUserBuffer Number of frames per user buffer, as requested\nby the framesPerBuffer parameter to Pa_OpenStream. This parameter may be\nzero to indicate that the user will accept any (and varying) buffer sizes.\n\n@param framesPerHostBuffer Specifies the number of frames per host buffer\nfor the fixed buffer size mode, and the maximum number of frames\nper host buffer for the bounded host buffer size mode. It is ignored for\nthe other modes.\n\n@param hostBufferSizeMode A mode flag indicating the size variability of\nhost buffers that will be passed to the buffer processor. See\nPaUtilHostBufferSizeMode for further details.\n\n@param streamCallback The user stream callback passed to Pa_OpenStream.\n\n@param userData The user data field passed to Pa_OpenStream.\n\n@note The interleave flag is ignored for host buffer formats. Host\ninterleave is determined by the use of different SetInput and SetOutput\nfunctions.\n\n@return An error code indicating whether the initialization was successful.\nIf the error code is not PaNoError, the buffer processor was not initialized\nand should not be used.\n\n@see Pa_OpenStream, PaUtilHostBufferSizeMode, PaUtil_TerminateBufferProcessor","declarations":[{"spell":"377:9-377:41|-1|1|1","param_spellings":["377:66-377:81","378:17-378:34","378:51-378:72","379:28-379:49","380:17-380:35","380:52-380:74","381:28-381:50","382:20-382:30","383:27-383:38","384:27-384:46","385:27-385:46","386:38-386:56","387:31-387:45","387:53-387:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":13586688465381586961,"detailed_name":"void PaUtil_TerminateBufferProcessor(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":5,"short_name_size":31,"kind":12,"storage":1,"hover":"","comments":"Terminate a buffer processor's representation. Deallocates any temporary\nbuffers allocated by PaUtil_InitializeBufferProcessor.\n\n@param bufferProcessor The buffer processor structure to terminate.\n\n@see PaUtil_InitializeBufferProcessor.","declarations":[{"spell":"397:6-397:37|-1|1|1","param_spellings":["397:62-397:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":7281525293472140545,"detailed_name":"void PaUtil_ResetBufferProcessor(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":5,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"Clear any internally buffered data. If you call\nPaUtil_InitializeBufferProcessor in your OpenStream routine, make sure you\ncall PaUtil_ResetBufferProcessor in your StartStream call.\n\n@param bufferProcessor The buffer processor to reset.","declarations":[{"spell":"406:6-406:33|-1|1|1","param_spellings":["406:58-406:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":8274783164638394425,"detailed_name":"unsigned long PaUtil_GetBufferProcessorInputLatencyFrames(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":14,"short_name_size":43,"kind":12,"storage":1,"hover":"","comments":"Retrieve the input latency of a buffer processor, in frames.\n\n@param bufferProcessor The buffer processor examine.\n\n@return The input latency introduced by the buffer processor, in frames.\n\n@see PaUtil_GetBufferProcessorOutputLatencyFrames","declarations":[{"spell":"417:15-417:58|-1|1|1","param_spellings":["417:83-417:98"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":5683453509506535342,"detailed_name":"unsigned long PaUtil_GetBufferProcessorOutputLatencyFrames(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":14,"short_name_size":44,"kind":12,"storage":1,"hover":"","comments":"Retrieve the output latency of a buffer processor, in frames.\n\n@param bufferProcessor The buffer processor examine.\n\n@return The output latency introduced by the buffer processor, in frames.\n\n@see PaUtil_GetBufferProcessorInputLatencyFrames","declarations":[{"spell":"427:15-427:59|-1|1|1","param_spellings":["427:84-427:99"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":17169724118023821510,"detailed_name":"void PaUtil_SetInputFrameCount(PaUtilBufferProcessor *bufferProcessor, unsigned long frameCount)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"Set the number of frames in the input host buffer(s) specified by the\nPaUtil_Set*InputChannel functions.\n\n@param bufferProcessor The buffer processor.\n\n@param frameCount The number of host input frames. A 0 frameCount indicates to\nuse the framesPerHostBuffer value passed to PaUtil_InitializeBufferProcessor.\n\n@see PaUtil_SetNoInput, PaUtil_SetInputChannel,\nPaUtil_SetInterleavedInputChannels, PaUtil_SetNonInterleavedInputChannel","declarations":[{"spell":"451:6-451:31|-1|1|1","param_spellings":["451:56-451:71","452:23-452:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":2251208069321269004,"detailed_name":"void PaUtil_SetNoInput(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"Indicate that no input is avalable. This function should be used when\npriming the output of a full-duplex stream opened with the\npaPrimeOutputBuffersUsingStreamCallback flag. Note that it is not necessary\nto call this or any othe PaUtil_Set*Input* functions for ouput-only streams.\n\n@param bufferProcessor The buffer processor.","declarations":[{"spell":"462:6-462:23|-1|1|1","param_spellings":["462:48-462:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":10671368408993373158,"detailed_name":"void PaUtil_SetInputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data, unsigned int stride)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to a host input channel.\n\n@param bufferProcessor The buffer processor.\n@param channel The channel number.\n@param data The buffer.\n@param stride The stride from one sample to the next, in samples. For\ninterleaved host buffers, the stride will usually be the same as the number of\nchannels in the buffer.","declarations":[{"spell":"474:6-474:28|-1|1|1","param_spellings":["474:53-474:68","475:22-475:29","475:37-475:41","475:56-475:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":81045003679655249,"detailed_name":"void PaUtil_SetInterleavedInputChannels(PaUtilBufferProcessor *bufferProcessor, unsigned int firstChannel, void *data, unsigned int channelCount)","short_name_offset":5,"short_name_size":34,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to an number of interleaved\nhost input channels.\n\n@param bufferProcessor The buffer processor.\n@param firstChannel The first channel number.\n@param data The buffer.\n@param channelCount The number of interleaved channels in the buffer. If\nchannelCount is zero, the number of channels specified to\nPaUtil_InitializeBufferProcessor will be used.","declarations":[{"spell":"488:6-488:40|-1|1|1","param_spellings":["488:65-488:80","489:22-489:34","489:42-489:46","489:61-489:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":14784095300435698463,"detailed_name":"void PaUtil_SetNonInterleavedInputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data)","short_name_offset":5,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to one non-interleaved host\noutput channel.\n\n@param bufferProcessor The buffer processor.\n@param channel The channel number.\n@param data The buffer.","declarations":[{"spell":"499:6-499:42|-1|1|1","param_spellings":["499:67-499:82","500:22-500:29","500:37-500:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":6810547949346840338,"detailed_name":"void PaUtil_Set2ndInputFrameCount(PaUtilBufferProcessor *bufferProcessor, unsigned long frameCount)","short_name_offset":5,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the input buffer is split in two halves.\n@see PaUtil_SetInputFrameCount","declarations":[{"spell":"506:6-506:34|-1|1|1","param_spellings":["506:59-506:74","507:23-507:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":16867476619733225720,"detailed_name":"void PaUtil_Set2ndInputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data, unsigned int stride)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the input buffer is split in two halves.\n@see PaUtil_SetInputChannel","declarations":[{"spell":"512:6-512:31|-1|1|1","param_spellings":["512:56-512:71","513:22-513:29","513:37-513:41","513:56-513:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":15076086258840615457,"detailed_name":"void PaUtil_Set2ndInterleavedInputChannels(PaUtilBufferProcessor *bufferProcessor, unsigned int firstChannel, void *data, unsigned int channelCount)","short_name_offset":5,"short_name_size":37,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the input buffer is split in two halves.\n@see PaUtil_SetInterleavedInputChannels","declarations":[{"spell":"518:6-518:43|-1|1|1","param_spellings":["518:68-518:83","519:22-519:34","519:42-519:46","519:61-519:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":15490796144891985158,"detailed_name":"void PaUtil_Set2ndNonInterleavedInputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data)","short_name_offset":5,"short_name_size":39,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the input buffer is split in two halves.\n@see PaUtil_SetNonInterleavedInputChannel","declarations":[{"spell":"524:6-524:45|-1|1|1","param_spellings":["524:70-524:85","525:22-525:29","525:37-525:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":6402916434823505870,"detailed_name":"void PaUtil_SetOutputFrameCount(PaUtilBufferProcessor *bufferProcessor, unsigned long frameCount)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Set the number of frames in the output host buffer(s) specified by the\nPaUtil_Set*OutputChannel functions.\n\n@param bufferProcessor The buffer processor.\n\n@param frameCount The number of host output frames. A 0 frameCount indicates to\nuse the framesPerHostBuffer value passed to PaUtil_InitializeBufferProcessor.\n\n@see PaUtil_SetOutputChannel, PaUtil_SetInterleavedOutputChannels,\nPaUtil_SetNonInterleavedOutputChannel","declarations":[{"spell":"539:6-539:32|-1|1|1","param_spellings":["539:57-539:72","540:23-540:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":11119986891713270858,"detailed_name":"void PaUtil_SetNoOutput(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"Indicate that the output will be discarded. This function should be used\nwhen implementing the paNeverDropInput mode for full duplex streams.\n\n@param bufferProcessor The buffer processor.","declarations":[{"spell":"548:6-548:24|-1|1|1","param_spellings":["548:49-548:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":10842045324110801981,"detailed_name":"void PaUtil_SetOutputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data, unsigned int stride)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to a host output channel.\n\n@param bufferProcessor The buffer processor.\n@param channel The channel number.\n@param data The buffer.\n@param stride The stride from one sample to the next, in samples. For\ninterleaved host buffers, the stride will usually be the same as the number of\nchannels in the buffer.","declarations":[{"spell":"560:6-560:29|-1|1|1","param_spellings":["560:54-560:69","561:22-561:29","561:37-561:41","561:56-561:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":1821654191648900342,"detailed_name":"void PaUtil_SetInterleavedOutputChannels(PaUtilBufferProcessor *bufferProcessor, unsigned int firstChannel, void *data, unsigned int channelCount)","short_name_offset":5,"short_name_size":35,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to a number of interleaved\nhost output channels.\n\n@param bufferProcessor The buffer processor.\n@param firstChannel The first channel number.\n@param data The buffer.\n@param channelCount The number of interleaved channels in the buffer. If\nchannelCount is zero, the number of channels specified to\nPaUtil_InitializeBufferProcessor will be used.","declarations":[{"spell":"574:6-574:41|-1|1|1","param_spellings":["574:66-574:81","575:22-575:34","575:42-575:46","575:61-575:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":12940024155713942810,"detailed_name":"void PaUtil_SetNonInterleavedOutputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data)","short_name_offset":5,"short_name_size":37,"kind":12,"storage":1,"hover":"","comments":"Provide the buffer processor with a pointer to one non-interleaved host\noutput channel.\n\n@param bufferProcessor The buffer processor.\n@param channel The channel number.\n@param data The buffer.","declarations":[{"spell":"585:6-585:43|-1|1|1","param_spellings":["585:68-585:83","586:22-586:29","586:37-586:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":10835467250775255313,"detailed_name":"void PaUtil_Set2ndOutputFrameCount(PaUtilBufferProcessor *bufferProcessor, unsigned long frameCount)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the output buffer is split in two halves.\n@see PaUtil_SetOutputFrameCount","declarations":[{"spell":"592:6-592:35|-1|1|1","param_spellings":["592:60-592:75","593:23-593:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":16257812638452217864,"detailed_name":"void PaUtil_Set2ndOutputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data, unsigned int stride)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the output buffer is split in two halves.\n@see PaUtil_SetOutputChannel","declarations":[{"spell":"598:6-598:32|-1|1|1","param_spellings":["598:57-598:72","599:22-599:29","599:37-599:41","599:56-599:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":7564129278849538444,"detailed_name":"void PaUtil_Set2ndInterleavedOutputChannels(PaUtilBufferProcessor *bufferProcessor, unsigned int firstChannel, void *data, unsigned int channelCount)","short_name_offset":5,"short_name_size":38,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the output buffer is split in two halves.\n@see PaUtil_SetInterleavedOutputChannels","declarations":[{"spell":"604:6-604:44|-1|1|1","param_spellings":["604:69-604:84","605:22-605:34","605:42-605:46","605:61-605:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":15798957181750202900,"detailed_name":"void PaUtil_Set2ndNonInterleavedOutputChannel(PaUtilBufferProcessor *bufferProcessor, unsigned int channel, void *data)","short_name_offset":5,"short_name_size":40,"kind":12,"storage":1,"hover":"","comments":"Use for the second buffer half when the output buffer is split in two halves.\n@see PaUtil_SetNonInterleavedOutputChannel","declarations":[{"spell":"610:6-610:46|-1|1|1","param_spellings":["610:71-610:86","611:22-611:29","611:37-611:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":2067790970771475187,"detailed_name":"void PaUtil_BeginBufferProcessing(PaUtilBufferProcessor *bufferProcessor, PaStreamCallbackTimeInfo *timeInfo, PaStreamCallbackFlags callbackStatusFlags)","short_name_offset":5,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"Commence processing a host buffer (or a pair of host buffers in the\nfull-duplex case) for a callback stream.\n\n@param bufferProcessor The buffer processor.\n\n@param timeInfo Timing information for the first sample of the host\nbuffer(s). This information may be adjusted when buffer adaption is being\nperformed.\n\n@param callbackStatusFlags Flags indicating whether underruns and overruns\nhave occurred since the last time the buffer processor was called.","declarations":[{"spell":"632:6-632:34|-1|1|1","param_spellings":["632:59-632:74","633:35-633:43","633:67-633:86"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":9313196868069499161,"detailed_name":"unsigned long PaUtil_EndBufferProcessing(PaUtilBufferProcessor *bufferProcessor, int *callbackResult)","short_name_offset":14,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Finish processing a host buffer (or a pair of host buffers in the\nfull-duplex case) for a callback stream.\n\n@param bufferProcessor The buffer processor.\n\n@param callbackResult On input, indicates a previous callback result, and on\nexit, the result of the user stream callback, if it is called.\nOn entry callbackResult should contain one of { paContinue, paComplete, or\npaAbort}. If paComplete is passed, the stream callback will not be called\nbut any audio that was generated by previous stream callbacks will be copied\nto the output buffer(s). You can check whether the buffer processor's internal\nbuffer is empty by calling PaUtil_IsBufferProcessorOutputEmpty.\n\nIf the stream callback is called its result is stored in *callbackResult. If\nthe stream callback returns paComplete or paAbort, all output buffers will be\nfull of valid data - some of which may be zeros to acount for data that\nwasn't generated by the terminating callback.\n\n@return The number of frames processed. This usually corresponds to the\nnumber of frames specified by the PaUtil_Set*FrameCount functions, exept in\nthe paUtilVariableHostBufferSizePartialUsageAllowed buffer size mode when a\nsmaller value may be returned.","declarations":[{"spell":"659:15-659:41|-1|1|1","param_spellings":["659:66-659:81","660:14-660:28"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":1727918645480193851,"detailed_name":"int PaUtil_IsBufferProcessorOutputEmpty(PaUtilBufferProcessor *bufferProcessor)","short_name_offset":4,"short_name_size":35,"kind":12,"storage":1,"hover":"","comments":"Determine whether any callback generated output remains in the bufffer\nprocessor's internal buffers. This method may be used to determine when to\ncontinue calling PaUtil_EndBufferProcessing() after the callback has returned\na callbackResult of paComplete.\n\n@param bufferProcessor The buffer processor.\n\n@return Returns non-zero when callback generated output remains in the internal\nbuffer and zero (0) when there internal buffer contains no callback generated\ndata.","declarations":[{"spell":"674:5-674:40|-1|1|1","param_spellings":["674:65-674:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":4109317424048435013,"detailed_name":"unsigned long PaUtil_CopyInput(PaUtilBufferProcessor *bufferProcessor, void **buffer, unsigned long frameCount)","short_name_offset":14,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"Copy samples from host input channels set up by the PaUtil_Set*InputChannels\nfunctions to a user supplied buffer. This function is intended for use with\nblocking read/write streams. Copies the minimum of the number of\nuser frames (specified by the frameCount parameter) and the number of available\nhost frames (specified in a previous call to SetInputFrameCount()).\n\n@param bufferProcessor The buffer processor.\n\n@param buffer A pointer to the user buffer pointer, or a pointer to a pointer\nto an array of user buffer pointers for a non-interleaved stream. It is\nimportant that this parameter points to a copy of the user buffer pointers,\nnot to the actual user buffer pointers, because this function updates the\npointers before returning.\n\n@param frameCount The number of frames of data in the buffer(s) pointed to by\nthe buffer parameter.\n\n@return The number of frames copied. The buffer pointer(s) pointed to by the\nbuffer parameter are advanced to point to the frame(s) following the last one\nfilled.","declarations":[{"spell":"704:15-704:31|-1|1|1","param_spellings":["704:56-704:71","705:16-705:22","705:38-705:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":12030412074562178091,"detailed_name":"unsigned long PaUtil_CopyOutput(PaUtilBufferProcessor *bufferProcessor, const void **buffer, unsigned long frameCount)","short_name_offset":14,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"Copy samples from a user supplied buffer to host output channels set up by\nthe PaUtil_Set*OutputChannels functions. This function is intended for use with\nblocking read/write streams. Copies the minimum of the number of\nuser frames (specified by the frameCount parameter) and the number of\nhost frames (specified in a previous call to SetOutputFrameCount()).\n\n@param bufferProcessor The buffer processor.\n\n@param buffer A pointer to the user buffer pointer, or a pointer to a pointer\nto an array of user buffer pointers for a non-interleaved stream. It is\nimportant that this parameter points to a copy of the user buffer pointers,\nnot to the actual user buffer pointers, because this function updates the\npointers before returning.\n\n@param frameCount The number of frames of data in the buffer(s) pointed to by\nthe buffer parameter.\n\n@return The number of frames copied. The buffer pointer(s) pointed to by the\nbuffer parameter are advanced to point to the frame(s) following the last one\ncopied.","declarations":[{"spell":"729:15-729:32|-1|1|1","param_spellings":["729:57-729:72","730:23-730:29","730:45-730:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":15626725640227605964,"detailed_name":"unsigned long PaUtil_ZeroOutput(PaUtilBufferProcessor *bufferProcessor, unsigned long frameCount)","short_name_offset":14,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"Zero samples in host output channels set up by the PaUtil_Set*OutputChannels\nfunctions. This function is useful for flushing streams.\nZeros the minimum of frameCount and the number of host frames specified in a\nprevious call to SetOutputFrameCount().\n\n@param bufferProcessor The buffer processor.\n\n@param frameCount The maximum number of frames to zero.\n\n@return The number of frames zeroed.","declarations":[{"spell":"744:15-744:32|-1|1|1","param_spellings":["744:57-744:72","745:23-745:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":1569785835537807609,"detailed_name":"(anon enum)::paUtilFixedHostBufferSize","short_name_offset":13,"short_name_size":25,"hover":"(anon enum)::paUtilFixedHostBufferSize = 0","comments":"The host buffer size is a fixed known size.","declarations":[],"spell":"221:5-221:30|0|2|2","extent":"221:5-221:30|0|2|0","type":2,"uses":[],"kind":22,"storage":0},{"id":1,"usr":15812232636945927475,"detailed_name":"(anon enum)::paUtilBoundedHostBufferSize","short_name_offset":13,"short_name_size":27,"hover":"(anon enum)::paUtilBoundedHostBufferSize = 1","comments":"The host buffer size may vary, but has a known maximum size.","declarations":[],"spell":"224:5-224:32|0|2|2","extent":"224:5-224:32|0|2|0","type":2,"uses":[],"kind":22,"storage":0},{"id":2,"usr":16675585356367883637,"detailed_name":"(anon enum)::paUtilUnknownHostBufferSize","short_name_offset":13,"short_name_size":27,"hover":"(anon enum)::paUtilUnknownHostBufferSize = 2","comments":"Nothing is known about the host buffer size.","declarations":[],"spell":"227:5-227:32|0|2|2","extent":"227:5-227:32|0|2|0","type":2,"uses":[],"kind":22,"storage":0},{"id":3,"usr":3978691720064875416,"detailed_name":"(anon enum)::paUtilVariableHostBufferSizePartialUsageAllowed","short_name_offset":13,"short_name_size":47,"hover":"(anon enum)::paUtilVariableHostBufferSizePartialUsageAllowed = 3","comments":"The host buffer size varies, and the client does not require the buffer\nprocessor to consume all of the input and fill all of the output buffer. This\nis useful when the implementation has access to the host API's circular buffer\nand only needs to consume/fill some of it, not necessarily all of it, with each\ncall to the buffer processor. This is the only mode where\nPaUtil_EndBufferProcessing() may not consume the whole buffer.","declarations":[],"spell":"236:5-236:52|0|2|2","extent":"236:5-236:52|0|2|0","type":2,"uses":[],"kind":22,"storage":0},{"id":4,"usr":12109961128719420321,"detailed_name":"void *PaUtilChannelDescriptor::data","short_name_offset":31,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"243:11-243:15|3|2|2","extent":"243:5-243:15|3|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":5,"usr":8950333830728446045,"detailed_name":"unsigned int PaUtilChannelDescriptor::stride","short_name_offset":38,"short_name_size":6,"hover":"","comments":"stride in samples, not bytes","declarations":[],"spell":"244:18-244:24|3|2|2","extent":"244:5-244:24|3|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":6,"usr":15827352439588850157,"detailed_name":"unsigned long (anon struct)::framesPerUserBuffer","short_name_offset":29,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"254:19-254:38|7|2|2","extent":"254:5-254:38|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":7,"usr":7676148073099794847,"detailed_name":"unsigned long (anon struct)::framesPerHostBuffer","short_name_offset":29,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"255:19-255:38|7|2|2","extent":"255:5-255:38|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":8,"usr":15247029741925981994,"detailed_name":"PaUtilHostBufferSizeMode (anon struct)::hostBufferSizeMode","short_name_offset":40,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"257:30-257:48|7|2|2","extent":"257:5-257:48|7|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":9,"usr":9998455120256013775,"detailed_name":"int (anon struct)::useNonAdaptingProcess","short_name_offset":19,"short_name_size":21,"hover":"","comments":"","declarations":[],"spell":"258:9-258:30|7|2|2","extent":"258:5-258:30|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":10,"usr":10906068952864226006,"detailed_name":"int (anon struct)::userOutputSampleFormatIsEqualToHost","short_name_offset":19,"short_name_size":35,"hover":"","comments":"","declarations":[],"spell":"259:9-259:44|7|2|2","extent":"259:5-259:44|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":11,"usr":1810942241458655740,"detailed_name":"int (anon struct)::userInputSampleFormatIsEqualToHost","short_name_offset":19,"short_name_size":34,"hover":"","comments":"","declarations":[],"spell":"260:9-260:43|7|2|2","extent":"260:5-260:43|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":12,"usr":16142586482601121507,"detailed_name":"unsigned long (anon struct)::framesPerTempBuffer","short_name_offset":29,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"261:19-261:38|7|2|2","extent":"261:5-261:38|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":13,"usr":9682598690935811526,"detailed_name":"unsigned int (anon struct)::inputChannelCount","short_name_offset":28,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"263:18-263:35|7|2|2","extent":"263:5-263:35|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":14,"usr":4423914588552104708,"detailed_name":"unsigned int (anon struct)::bytesPerHostInputSample","short_name_offset":28,"short_name_size":23,"hover":"","comments":"","declarations":[],"spell":"264:18-264:41|7|2|2","extent":"264:5-264:41|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":15,"usr":4829008969349974825,"detailed_name":"unsigned int (anon struct)::bytesPerUserInputSample","short_name_offset":28,"short_name_size":23,"hover":"","comments":"","declarations":[],"spell":"265:18-265:41|7|2|2","extent":"265:5-265:41|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":16,"usr":10201057948381859419,"detailed_name":"int (anon struct)::userInputIsInterleaved","short_name_offset":19,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"266:9-266:31|7|2|2","extent":"266:5-266:31|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":17,"usr":2290461438283358629,"detailed_name":"PaUtilConverter *(anon struct)::inputConverter","short_name_offset":32,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"267:22-267:36|7|2|2","extent":"267:5-267:36|7|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":18,"usr":16327019676909573552,"detailed_name":"PaUtilZeroer *(anon struct)::inputZeroer","short_name_offset":29,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"268:19-268:30|7|2|2","extent":"268:5-268:30|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":19,"usr":16801622801361067334,"detailed_name":"unsigned int (anon struct)::outputChannelCount","short_name_offset":28,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"270:18-270:36|7|2|2","extent":"270:5-270:36|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":20,"usr":7001855576318979343,"detailed_name":"unsigned int (anon struct)::bytesPerHostOutputSample","short_name_offset":28,"short_name_size":24,"hover":"","comments":"","declarations":[],"spell":"271:18-271:42|7|2|2","extent":"271:5-271:42|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":21,"usr":15889580790579573876,"detailed_name":"unsigned int (anon struct)::bytesPerUserOutputSample","short_name_offset":28,"short_name_size":24,"hover":"","comments":"","declarations":[],"spell":"272:18-272:42|7|2|2","extent":"272:5-272:42|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":22,"usr":16293276395687714144,"detailed_name":"int (anon struct)::userOutputIsInterleaved","short_name_offset":19,"short_name_size":23,"hover":"","comments":"","declarations":[],"spell":"273:9-273:32|7|2|2","extent":"273:5-273:32|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":23,"usr":6040474508033654353,"detailed_name":"PaUtilConverter *(anon struct)::outputConverter","short_name_offset":32,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"274:22-274:37|7|2|2","extent":"274:5-274:37|7|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":24,"usr":5241426201331162798,"detailed_name":"PaUtilZeroer *(anon struct)::outputZeroer","short_name_offset":29,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"275:19-275:31|7|2|2","extent":"275:5-275:31|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":25,"usr":11120870708136462039,"detailed_name":"unsigned long (anon struct)::initialFramesInTempInputBuffer","short_name_offset":29,"short_name_size":30,"hover":"","comments":"","declarations":[],"spell":"277:19-277:49|7|2|2","extent":"277:5-277:49|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":26,"usr":13077659160453036067,"detailed_name":"unsigned long (anon struct)::initialFramesInTempOutputBuffer","short_name_offset":29,"short_name_size":31,"hover":"","comments":"","declarations":[],"spell":"278:19-278:50|7|2|2","extent":"278:5-278:50|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":27,"usr":805099879951029529,"detailed_name":"void *(anon struct)::tempInputBuffer","short_name_offset":21,"short_name_size":15,"hover":"","comments":"used for slips, block adaption, and conversion.","declarations":[],"spell":"280:11-280:26|7|2|2","extent":"280:5-280:26|7|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":28,"usr":12267199059710620795,"detailed_name":"void **(anon struct)::tempInputBufferPtrs","short_name_offset":22,"short_name_size":19,"hover":"","comments":"storage for non-interleaved buffer pointers, NULL for interleaved user input","declarations":[],"spell":"281:12-281:31|7|2|2","extent":"281:5-281:31|7|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":29,"usr":11540615652270765100,"detailed_name":"unsigned long (anon struct)::framesInTempInputBuffer","short_name_offset":29,"short_name_size":23,"hover":"","comments":"frames remaining in input buffer from previous adaption iteration","declarations":[],"spell":"282:19-282:42|7|2|2","extent":"282:5-282:42|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":30,"usr":4057375713520323195,"detailed_name":"void *(anon struct)::tempOutputBuffer","short_name_offset":21,"short_name_size":16,"hover":"","comments":"used for slips, block adaption, and conversion.","declarations":[],"spell":"284:11-284:27|7|2|2","extent":"284:5-284:27|7|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":31,"usr":4478587106622399371,"detailed_name":"void **(anon struct)::tempOutputBufferPtrs","short_name_offset":22,"short_name_size":20,"hover":"","comments":"storage for non-interleaved buffer pointers, NULL for interleaved user output","declarations":[],"spell":"285:12-285:32|7|2|2","extent":"285:5-285:32|7|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":32,"usr":8963494935013943735,"detailed_name":"unsigned long (anon struct)::framesInTempOutputBuffer","short_name_offset":29,"short_name_size":24,"hover":"","comments":"frames remaining in input buffer from previous adaption iteration","declarations":[],"spell":"286:19-286:43|7|2|2","extent":"286:5-286:43|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":33,"usr":14783082979924750880,"detailed_name":"PaStreamCallbackTimeInfo *(anon struct)::timeInfo","short_name_offset":41,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"288:31-288:39|7|2|2","extent":"288:5-288:39|7|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":34,"usr":17450153383978579765,"detailed_name":"PaStreamCallbackFlags (anon struct)::callbackStatusFlags","short_name_offset":37,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"290:27-290:46|7|2|2","extent":"290:5-290:46|7|2|0","type":13,"uses":[],"kind":8,"storage":0},{"id":35,"usr":4954213405442089305,"detailed_name":"int (anon struct)::hostInputIsInterleaved","short_name_offset":19,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"292:9-292:31|7|2|2","extent":"292:5-292:31|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":36,"usr":9653789676943581408,"detailed_name":"unsigned long [2] (anon struct)::hostInputFrameCount","short_name_offset":33,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"293:19-293:38|7|2|2","extent":"293:5-293:41|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":37,"usr":5612467681984468859,"detailed_name":"PaUtilChannelDescriptor *[2] (anon struct)::hostInputChannels","short_name_offset":44,"short_name_size":17,"hover":"","comments":"pointers to arrays of channel descriptors.\npointers are NULL for half-duplex output processing.\nhostInputChannels[i].data is NULL when the caller\ncalls PaUtil_SetNoInput()","declarations":[],"spell":"294:30-294:47|7|2|2","extent":"294:5-294:50|7|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":38,"usr":2151167680334452226,"detailed_name":"int (anon struct)::hostOutputIsInterleaved","short_name_offset":19,"short_name_size":23,"hover":"","comments":"","declarations":[],"spell":"299:9-299:32|7|2|2","extent":"299:5-299:32|7|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":39,"usr":14274006865682038421,"detailed_name":"unsigned long [2] (anon struct)::hostOutputFrameCount","short_name_offset":33,"short_name_size":20,"hover":"","comments":"","declarations":[],"spell":"300:19-300:39|7|2|2","extent":"300:5-300:42|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":40,"usr":5319906423894163293,"detailed_name":"PaUtilChannelDescriptor *[2] (anon struct)::hostOutputChannels","short_name_offset":44,"short_name_size":18,"hover":"","comments":"pointers to arrays of channel descriptors.\npointers are NULL for half-duplex input processing.\nhostOutputChannels[i].data is NULL when the caller\ncalls PaUtil_SetNoOutput()","declarations":[],"spell":"301:30-301:48|7|2|2","extent":"301:5-301:51|7|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":41,"usr":12361324623139096840,"detailed_name":"PaUtilTriangularDitherGenerator (anon struct)::ditherGenerator","short_name_offset":47,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"307:37-307:52|7|2|2","extent":"307:5-307:52|7|2|0","type":14,"uses":[],"kind":8,"storage":0},{"id":42,"usr":6922886568207318415,"detailed_name":"double (anon struct)::samplePeriod","short_name_offset":22,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"309:12-309:24|7|2|2","extent":"309:5-309:24|7|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":43,"usr":5512120325774937046,"detailed_name":"PaStreamCallback *(anon struct)::streamCallback","short_name_offset":33,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"311:23-311:37|7|2|2","extent":"311:5-311:37|7|2|0","type":16,"uses":[],"kind":8,"storage":0},{"id":44,"usr":12682600104038299958,"detailed_name":"void *(anon struct)::userData","short_name_offset":21,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"312:11-312:19|7|2|2","extent":"312:5-312:19|7|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":45,"usr":4649559267291230822,"detailed_name":"PA_PROCESS_H","short_name_offset":0,"short_name_size":12,"hover":"#define PA_PROCESS_H","comments":"","declarations":[],"spell":"2:9-2:21|-1|1|2","extent":"2:9-2:21|-1|1|0","uses":[],"kind":255,"storage":0}]}