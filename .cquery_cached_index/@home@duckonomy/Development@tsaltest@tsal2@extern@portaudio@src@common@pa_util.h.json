16
{"last_modification_time":1575223631,"language":1,"import_file":"/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_cpuload.c","args_hash":11184243650414851951,"includes":[{"line":51,"resolved_path":"/usr/include/portaudio.h"}],"dependencies":["/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_cpuload.c","/usr/include/assert.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/home/duckonomy/Development/tsaltest/tsal2/extern/portaudio/src/common/pa_cpuload.h","/usr/include/portaudio.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h"],"skipped_by_preprocessor":["54:1-57:7","156:1-158:7"],"types":[{"id":0,"usr":17410634111619582566,"detailed_name":"PaUtilHostApiRepresentation","short_name_offset":0,"short_name_size":27,"kind":23,"hover":"","comments":"","declarations":["60:8-60:35|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["77:49-77:76|-1|1|4","92:16-92:43|-1|1|4"]},{"id":1,"usr":5627659295015926587,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["77:1-77:8|-1|1|4","90:1-90:8|-1|1|4"]},{"id":2,"usr":16278802996125123635,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["78:9-78:24|-1|1|4","111:35-111:50|-1|1|4"]},{"id":3,"usr":16343742243685163560,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["91:9-91:22|-1|1|4","91:39-91:52|-1|1|4"]}],"funcs":[{"id":0,"usr":7729105945935655430,"detailed_name":"PaError PaUtil_GetHostApiRepresentation(struct PaUtilHostApiRepresentation **hostApi, PaHostApiTypeId type)","short_name_offset":8,"short_name_size":31,"kind":12,"storage":1,"hover":"","comments":"Retrieve a specific host API representation. This function can be used\nby implementations to retrieve a pointer to their representation in\nhost api specific extension functions which aren't passed a rep pointer\nby pa_front.c.\n\n@param hostApi A pointer to a host API represenation pointer. Apon success\nthis will receive the requested representation pointer.\n\n@param type A valid host API type identifier.\n\n@returns An error code. If the result is PaNoError then a pointer to the\nrequested host API representation will be stored in *hostApi. If the host API\nspecified by type is not found, this function returns paHostApiNotFound.","declarations":[{"spell":"77:9-77:40|-1|1|1","param_spellings":["77:79-77:86","78:25-78:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":9991230015018061131,"detailed_name":"PaError PaUtil_DeviceIndexToHostApiDeviceIndex(PaDeviceIndex *hostApiDevice, PaDeviceIndex device, struct PaUtilHostApiRepresentation *hostApi)","short_name_offset":8,"short_name_size":38,"kind":12,"storage":1,"hover":"","comments":"Convert a PortAudio device index into a host API specific device index.\n@param hostApiDevice Pointer to a device index, on success this will recieve the\nconverted device index value.\n@param device The PortAudio device index to convert.\n@param hostApi The host api which the index should be converted for.\n\n@returns On success returns PaNoError and places the converted index in the\nhostApiDevice parameter.","declarations":[{"spell":"90:9-90:47|-1|1|1","param_spellings":["91:24-91:37","91:53-91:59","92:45-92:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":10458955315331453786,"detailed_name":"void PaUtil_SetLastHostErrorInfo(PaHostApiTypeId hostApiType, long errorCode, const char *errorText)","short_name_offset":5,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"Set the host error information returned by Pa_GetLastHostErrorInfo. This\nfunction and the paUnanticipatedHostError error code should be used as a\nlast resort.  Implementors should use existing PA error codes where possible,\nor nominate new ones. Note that at it is always better to use\nPaUtil_SetLastHostErrorInfo() and paUnanticipatedHostError than to return an\nambiguous or inaccurate PaError code.\n\n@param hostApiType  The host API which encountered the error (ie of the caller)\n\n@param errorCode The error code returned by the native API function.\n\n@param errorText A string describing the error. PaUtil_SetLastHostErrorInfo\nmakes a copy of the string, so it is not necessary for the pointer to remain\nvalid after the call to PaUtil_SetLastHostErrorInfo() returns.","declarations":[{"spell":"111:6-111:33|-1|1|1","param_spellings":["111:51-111:62","111:69-111:78","112:21-112:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":3122869795605551158,"detailed_name":"void *PaUtil_AllocateMemory(long size)","short_name_offset":6,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"Allocate size bytes, guaranteed to be aligned to a FIXME byte boundary","declarations":[{"spell":"121:7-121:28|-1|1|1","param_spellings":["121:35-121:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":5234553751965859794,"detailed_name":"void PaUtil_FreeMemory(void *block)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"Realease block if non-NULL. block may be NULL","declarations":[{"spell":"125:6-125:23|-1|1|1","param_spellings":["125:31-125:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":16880129499124961975,"detailed_name":"int PaUtil_CountCurrentlyAllocatedBlocks()","short_name_offset":4,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"Return the number of currently allocated blocks. This function can be\nused for detecting memory leaks.\n\n@note Allocations will only be tracked if PA_TRACK_MEMORY is #defined. If\nit isn't, this function will always return 0.","declarations":[{"spell":"134:5-134:41|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":17054838744136155719,"detailed_name":"void PaUtil_InitializeClock()","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"Initialize the clock used by PaUtil_GetTime(). Call this before calling\nPaUtil_GetTime.\n\n@see PaUtil_GetTime","declarations":[{"spell":"142:6-142:28|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":8331808211209160874,"detailed_name":"double PaUtil_GetTime()","short_name_offset":7,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"Return the system time in seconds. Used to implement CPU load functions\n\n@see PaUtil_InitializeClock","declarations":[{"spell":"149:8-149:22|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":14047589192429614287,"detailed_name":"PA_UTIL_H","short_name_offset":0,"short_name_size":9,"hover":"#define PA_UTIL_H","comments":"","declarations":[],"spell":"2:9-2:18|-1|1|2","extent":"2:9-2:18|-1|1|0","uses":[],"kind":255,"storage":0}]}