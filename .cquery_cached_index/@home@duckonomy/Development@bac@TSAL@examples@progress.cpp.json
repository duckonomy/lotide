16
{"last_modification_time":1574975693,"language":1,"import_file":"/home/duckonomy/Development/bac/TSAL/examples/progress.cpp","args_hash":8583860895283344595,"includes":[{"line":1,"resolved_path":"/usr/lib/clang/7.0.0/include/omp.h"}],"dependencies":["/usr/lib/clang/7.0.0/include/omp.h","/usr/include/c++/9/stdlib.h","/usr/include/c++/9/cstdlib","/usr/include/c++/9/x86_64-redhat-linux/bits/c++config.h","/usr/include/bits/wordsize.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,4],"uses":[]},{"id":1,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1],"uses":[]},{"id":2,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,3,5],"uses":[]}],"funcs":[{"id":0,"usr":14512784031730521473,"detailed_name":"int main(int argc, char *argv[])","short_name_offset":4,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"@example progress.cpp\n\nProgressOctave is the audio equivalent of a graphical progress bar\nThe progress is conveyed through the ascending pitch. No progress\nmeans low pitch, and an almost completed task will be playing at a high\npitch. When done in parallel, each thread takes a chunk of the pitch\nrange based on how the omp parallel for pragma divides up the work\n\nParse the parameters\\n\nCreate the mixer and ProgressOctave\\n\nRun parallel block\n- Update the ProgressOctave","declarations":[],"spell":"17:5-17:9|-1|1|2","extent":"17:1-33:2|-1|1|0","bases":[],"derived":[],"vars":[0,1,2,3,4,5],"uses":[],"callees":["26:3-26:22|1|3|36"]},{"id":1,"usr":2345827821909463825,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["26:3-26:22|0|3|36"],"callees":[]}],"vars":[{"id":0,"usr":1752831132771813882,"detailed_name":"int argc","short_name_offset":4,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"17:14-17:18|0|3|2","extent":"17:10-17:18|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":7522166442438298516,"detailed_name":"char *[] argv","short_name_offset":9,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"17:26-17:30|0|3|2","extent":"17:20-17:32|0|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":2,"usr":16618178742906732442,"detailed_name":"const unsigned int numThreads","short_name_offset":19,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"18:18-18:28|0|3|2","extent":"18:3-18:28|0|3|0","type":2,"uses":["26:23-26:33|0|3|12"],"kind":13,"storage":1},{"id":3,"usr":6784965119275839541,"detailed_name":"const unsigned int work","short_name_offset":19,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"19:18-19:22|0|3|2","extent":"19:3-19:22|0|3|0","type":2,"uses":["28:28-28:32|0|3|12"],"kind":13,"storage":1},{"id":4,"usr":2139272542563736889,"detailed_name":"int mixer","short_name_offset":4,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"21:15-21:20|0|3|2","extent":"21:3-21:20|0|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":5,"usr":18125062843298900399,"detailed_name":"unsigned int i","short_name_offset":13,"short_name_size":1,"hover":"unsigned int i = 0","comments":"","declarations":[],"spell":"28:17-28:18|0|3|2","extent":"28:8-28:22|0|3|0","type":2,"uses":["28:24-28:25|0|3|12","28:34-28:35|0|3|28"],"kind":13,"storage":1}]}