16
{"last_modification_time":1572485083,"language":1,"import_file":"/home/duckonomy/Development/Git/cquery/third_party/rapidjson/example/tutorial/tutorial.cpp","args_hash":8583860895283344595,"includes":[{"line":5,"resolved_path":"/usr/include/c++/9/cstdio"}],"dependencies":[],"skipped_by_preprocessor":["20:1-24:6"],"types":[{"id":0,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,2,6,11],"uses":[]},{"id":1,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,3,4,5,7,8,9,10,12,13],"uses":[]}],"funcs":[{"id":0,"usr":14512784031730521473,"detailed_name":"int main(int, char *[])","short_name_offset":4,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"11:5-11:9|-1|1|2","extent":"11:1-151:2|-1|1|0","bases":[],"derived":[],"vars":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":17153143083153752080,"detailed_name":"const char [102] json","short_name_offset":17,"short_name_size":4,"hover":"","comments":"\n1. Parse a JSON text string to a document.","declarations":[],"spell":"15:16-15:20|0|3|2","extent":"15:5-15:144|0|3|0","type":0,"uses":["26:24-26:28|-1|1|4"],"kind":13,"storage":1},{"id":1,"usr":7471889402146164335,"detailed_name":"int document","short_name_offset":4,"short_name_size":8,"hover":"","comments":"Default template parameter uses UTF8 and MemoryPoolAllocator.","declarations":[],"spell":"18:14-18:22|0|3|2","extent":"18:5-18:22|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":2,"usr":16828898292966563863,"detailed_name":"char [102] buffer","short_name_offset":11,"short_name_size":6,"hover":"","comments":"In-situ parsing, decode strings directly in the source string. Source must be string.","declarations":[],"spell":"26:10-26:16|0|3|2","extent":"26:5-26:30|0|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":3,"usr":10200933009009239018,"detailed_name":"int hello","short_name_offset":4,"short_name_size":5,"hover":"","comments":"Since version 0.2, you can use single lookup to check the existing of member and its value:","declarations":[],"spell":"45:27-45:32|0|3|2","extent":"45:5-45:32|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":4,"usr":5916805655970475040,"detailed_name":"const int &a","short_name_offset":11,"short_name_size":1,"hover":"","comments":"Using a reference for consecutive access is handy and faster.","declarations":[],"spell":"68:22-68:23|0|3|2","extent":"68:9-68:23|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":5,"usr":11532985262370305674,"detailed_name":"int y","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"73:13-73:14|0|3|2","extent":"73:9-73:14|0|3|0","type":1,"uses":["74:15-74:16|0|3|4"],"kind":13,"storage":1},{"id":6,"usr":12078821803365279076,"detailed_name":"const char *[7] kTypeNames","short_name_offset":16,"short_name_size":10,"hover":"","comments":"Iterating object members","declarations":[],"spell":"84:24-84:34|0|3|2","extent":"84:5-84:105|0|3|0","type":0,"uses":[],"kind":13,"storage":3},{"id":7,"usr":3739792397839989610,"detailed_name":"int f20","short_name_offset":4,"short_name_size":3,"hover":"","comments":"compute factorial of 20","declarations":[],"spell":"93:18-93:21|0|3|2","extent":"93:9-93:21|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":8,"usr":16908026411478528043,"detailed_name":"int &a","short_name_offset":5,"short_name_size":1,"hover":"","comments":"This time we uses non-const reference.","declarations":[],"spell":"102:16-102:17|0|3|2","extent":"102:9-102:17|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":9,"usr":6582729839047432235,"detailed_name":"int &allocator","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"103:34-103:43|0|3|2","extent":"103:9-103:43|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":10,"usr":14123596262131017852,"detailed_name":"int author","short_name_offset":4,"short_name_size":6,"hover":"","comments":"This version of SetString() needs an allocator, which means it will allocate a new buffer and copy the the string into the buffer.","declarations":[],"spell":"122:11-122:17|0|3|2","extent":"122:5-122:17|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":11,"usr":15841138973575386175,"detailed_name":"char [10] buffer2","short_name_offset":10,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"124:14-124:21|0|3|2","extent":"124:9-124:25|0|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":12,"usr":464041976124567150,"detailed_name":"int len","short_name_offset":4,"short_name_size":3,"hover":"","comments":"synthetic example of dynamically created string.","declarations":[],"spell":"125:13-125:16|0|3|2","extent":"125:9-125:16|0|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":13,"usr":16909638778654177963,"detailed_name":"int sb","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"145:18-145:20|0|3|2","extent":"145:5-145:20|0|3|0","type":1,"uses":[],"kind":13,"storage":1}]}