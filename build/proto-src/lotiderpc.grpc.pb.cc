// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lotiderpc.proto

#include "lotiderpc.pb.h"
#include "lotiderpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lotiderpc {

static const char* LoTideRPC_method_names[] = {
  "/lotiderpc.LoTideRPC/SayHello",
  "/lotiderpc.LoTideRPC/SayHelloAgain",
};

std::unique_ptr< LoTideRPC::Stub> LoTideRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoTideRPC::Stub> stub(new LoTideRPC::Stub(channel));
  return stub;
}

LoTideRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(LoTideRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHelloAgain_(LoTideRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoTideRPC::Stub::SayHello(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::lotiderpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void LoTideRPC::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::lotiderpc::Request* request, ::lotiderpc::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void LoTideRPC::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lotiderpc::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::lotiderpc::Response>* LoTideRPC::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lotiderpc::Response>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lotiderpc::Response>* LoTideRPC::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lotiderpc::Response>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status LoTideRPC::Stub::SayHelloAgain(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::lotiderpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHelloAgain_, context, request, response);
}

void LoTideRPC::Stub::experimental_async::SayHelloAgain(::grpc::ClientContext* context, const ::lotiderpc::Request* request, ::lotiderpc::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHelloAgain_, context, request, response, std::move(f));
}

void LoTideRPC::Stub::experimental_async::SayHelloAgain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lotiderpc::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHelloAgain_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::lotiderpc::Response>* LoTideRPC::Stub::AsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lotiderpc::Response>::Create(channel_.get(), cq, rpcmethod_SayHelloAgain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lotiderpc::Response>* LoTideRPC::Stub::PrepareAsyncSayHelloAgainRaw(::grpc::ClientContext* context, const ::lotiderpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lotiderpc::Response>::Create(channel_.get(), cq, rpcmethod_SayHelloAgain_, context, request, false);
}

LoTideRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoTideRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoTideRPC::Service, ::lotiderpc::Request, ::lotiderpc::Response>(
          std::mem_fn(&LoTideRPC::Service::SayHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoTideRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoTideRPC::Service, ::lotiderpc::Request, ::lotiderpc::Response>(
          std::mem_fn(&LoTideRPC::Service::SayHelloAgain), this)));
}

LoTideRPC::Service::~Service() {
}

::grpc::Status LoTideRPC::Service::SayHello(::grpc::ServerContext* context, const ::lotiderpc::Request* request, ::lotiderpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoTideRPC::Service::SayHelloAgain(::grpc::ServerContext* context, const ::lotiderpc::Request* request, ::lotiderpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lotiderpc

